---
- name: '[Raspberry Pi OS] Delete default pi user passwordless file  (TODO: Check whether newer versions still use username "pi" in filename)'
  ansible.builtin.file:
    state: absent
    path: /etc/sudoers.d/010_pi-nopasswd
  when: ansible_facts.distribution == 'Debian'
  become: true


- name: SW
  block:
    - name: Install
      ansible.builtin.apt:
        name:
          - libraspberrypi-bin       # '`vcgencmd`'
          - rpi-eeprom               # TODO: not tested yet  (see https://askubuntu.com/questions/1253070/raspberry-pi-4-firmware-upgrade-eeprom-over-ubuntu-20-04)
        state: present
    - name: Add necessary groups
      ansible.builtin.user:
        name: '{{ user.name }}'
        groups: video
        append: true
  become: true


# FIRMWARE SETTINGS REFERENCE: https://www.raspberrypi.com/documentation/computers/config_txt.html
- name: Determine path of config file
  block:
    - name: '[Raspberry Pi OS]'
      ansible.builtin.set_fact:
        firmware_config_file: '/boot/config.txt'
        cmdline_txt_path: '/boot/cmdline.txt'
      when: ansible_facts.distribution != 'Ubuntu'
    - name: '[Ubuntu]'
      ansible.builtin.set_fact:
        firmware_config_file: '/boot/firmware/config.txt'
        cmdline_txt_path: '/boot/firmware/cmdline.txt'
      when: ansible_facts.distribution == 'Ubuntu'

- name: Disable HW
  block:
    # VALIDATE:
    #   - BT: `hcitool dev` OR `hciconfig -a`           ( OR `bluetoothctl scan on`  (https://www.makeuseof.com/manage-bluetooth-linux-with-bluetoothctl/) )
    #   - WIFI: `ip a show wlan0`
    - name: … radios (WiFi & Bluetooth)
      block:
        # Alternative: Uninstall package `bluez`
        - name: Disable BT services
          ansible.builtin.service:
            name: '{{ item }}'
            state: stopped
            enabled: false
          failed_when: false
          with_items:
            - hciuart.service
#            - bluealsa.service
            - bluetooth.service
        - name: Disable HW                        # AGAIN: REQUIRES reboot
          ansible.builtin.lineinfile:
            dest: '{{ firmware_config_file }}'
            regexp: '^(#)?dtoverlay={{ item }}'
            line: 'dtoverlay={{ item }}'
          with_items:
            - disable-bt
            - disable-wifi

    - name: … LEDs
      ansible.builtin.lineinfile:
        dest: '{{ firmware_config_file }}'
        regexp: '^(#)?dtparam={{ item.key }}={{ item.value }}'
        line: 'dtparam={{ item.key }}={{ item.value }}'
      with_items:
        # Disable activity LED
        - key: 'act_led_trigger'
          value: 'none'
        - key: 'act_led_activelow'
          value: 'off'
        # Disable PWR LED  (currently not working properly  ??, see: https://stackoverflow.com/a/71492090)
        - key: 'pwr_led_trigger'
          value: 'default-on'
        - key: 'pwr_led_activelow'
          value: 'off'
        # Disable ethernet port (ACT & LNK) LEDs
        - key: 'eth_led0'
          value: '4'
        - key: 'eth_led1'
          value: '4'
  become: true

- name: Optimize 4 more speed
  ansible.builtin.lineinfile:
    dest: '{{ firmware_config_file }}'
    regexp: '^(#)?{{ item.key }}='
    line: '{{ item.key }}={{ item.value }}'
  with_items:
    - key: 'over_voltage'     # Optimize HW: Over Voltage
      value: '4'
    - key: 'arm_freq'         # Optimize HW: CPU freq
      value: '1800'
#    - key: 'core_freq'        # Optimize HW: GPU freq
#      value: '550'
#    - key: 'gpu_mem'          # Optimize HW: GPU Memory Split
#      value: '16'
    - key: 'boot_delay'       # Optimize boot: Disable boot delay
      value: '0'
    - key: 'disable_poe_fan'  # Optimize boot: Turn off PoE hat
      value: '1'
    - key: 'initial_turbo'    # Optimize boot: OC CPU 4 first secs
      value: '60'
    - key: 'disable_splash'   # UNRELATED …
      value: '1'
  become: true


## TODO:  SEE ALSO:
##   - https://github.com/raspberrypi/Raspberry-Pi-OS-64bit/issues/178
##   - https://forums.raspberrypi.com/viewtopic.php?t=305820
##  ALTERNATIVELY: `sudo ethtool --set-eee eth0 eee off`  //  VALIDATE: `sudo ethtool --show-eee eth0`
#- name: Fix unreliable ethernet due 2 EEE
#  ansible.builtin.lineinfile:
#    dest: '{{ firmware_config_file }}'
#    regexp: '^(#)?dtparam={{ item.key }}={{ item.value }}'
#    line: 'dtparam={{ item.key }}={{ item.value }}'
#  with_items:
#    - key: 'eee'
#      value: 'off'
#  become: true


- name: Optimize scheduler 4 server workloads
  block:
# TODO: MV 2 server role  +  check whether target host is in group *-client
    - include_tasks: rpi-cmdline.yml
      vars:
        key: preempt
        value: none
        update: true
  become: true






# SEE HERE: https://github.com/Pioreactor/rpi_hardware_pwm  //  https://github.com/dotnet/iot/blob/main/Documentation/raspi-pwm.md#enabling-hardware-pwm
# Validate via: `lsmod | grep pwm`
- name: Enable HW pwm
  block:
    - name: Update firmware config
      ansible.builtin.lineinfile:
        dest: '{{ firmware_config_file }}'
        regexp: '^(#)?dtoverlay=pwm-2chan(.+)?'
        line: 'dtoverlay=pwm-2chan'
    - name: Add user to the permission group        # NOTE: newer Raspberry Pi OS releases already have these rules  //  No notify as we need a restart anyways …
      block:
        - name: Check already exists
          ansible.builtin.stat:
            path: /etc/udev/rules.d/99-com.rules
          register: udev_rule_file
        - name: Copy udev rule
          ansible.builtin.template:
            src: rpi--99-com.rules.j2                    # TODO: INLINE ONCE SUPPORTED BY MODULE
            dest: /etc/udev/rules.d/99-com.rules
            owner: root
            group: root
            mode: 0644
          when: udev_rule_file.stat.exists == False
  become: true

- name: Clone repo
  ansible.builtin.git:
    repo: https://github.com/therealthingy/rpi_fan_controller
    dest: '{{ rpi_fan_pwm_container_dir }}'
    clone: true
    depth: 1
    update: true
  register: repo_clone
  failed_when:
    - repo_clone.failed
    - not 'Local modifications exist in the destination' in repo_clone.msg
  become: false


- name: Setup as docker container
  block:
    - name: Adapt config
      ansible.builtin.lineinfile:
        dest: '{{ rpi_fan_pwm_container_dir }}/.env'
        regexp: '^INVERT_PWM_SIGNAL=False$'
        line: 'INVERT_PWM_SIGNAL=True'
    - name: Ensure container is running
      community.docker.docker_compose_v2:              # TODO: Conditional docker dependency  ????????
        project_src: '{{ rpi_fan_pwm_container_dir }}'
  become: false

#- name: Setup as systemd service
#  block:
#    - name: Adapt service file
#      ansible.builtin.blockinfile:
#        marker: '# {mark} ENN VARS'
#        path: '{{ rpi_fan_pwm_container_dir }}/fan_control.service'
#        insertafter: '^\[Service\]$'
#        block: |2
#          Environment="INVERT_PWM_SIGNAL=True"
#          Environment="DC_MIN=30"
#      become: false
#    - name: Install dependencies
#      ansible.builtin.pip:
#        requirements: '{{ rpi_fan_pwm_container_dir }}/requirements.txt'
#        executable: pip3
#      become: false
#    - name: Setup script
#      ansible.builtin.copy:
#        src: '{{ rpi_fan_pwm_container_dir }}/{{ rpi_fan_file.file }}'
#        dest: '{{ rpi_fan_file.dest_dir }}/{{ rpi_fan_file.file }}'
#        owner: 'root'
#        group: 'root'
#        mode: 0755
#        remote_src: true
#      with_items:
#        - dest_dir: '/usr/local/bin'
#          file: 'fan_control'
#        - dest_dir: '/etc/systemd/system'
#          file: 'fan_control.service'
#      loop_control:
#        loop_var: rpi_fan_file
#    # REMOVAL of SERVICE later:
#    #  systemctl stop [servicename]
#    #  systemctl disable [servicename]
#    #  rm /etc/systemd/system/[servicename]
#    #  rm /etc/systemd/system/[servicename] # and symlinks that might be related
#    #  rm /usr/lib/systemd/system/[servicename]
#    #  rm /usr/lib/systemd/system/[servicename] # and symlinks that might be related
#    #  rm /etc/init.d/[servicename]
#    #  systemctl daemon-reload
#    #  systemctl reset-failed
#    - name: Enable service
#      ansible.builtin.systemd:
#        state: started
#        enabled: true
#        daemon_reload: true
#        name: fan_control
#  become: true




#  - name: Reboot system        # $$$$$$$$$$$$$$$$$$$   TODO (would require `when` - `changed_when`)
#    ansible.builtin.reboot:
