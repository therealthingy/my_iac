---
- name: '[Darwin / Debian/Ubuntu] Install systems programming tools/libs'
  block:
    - name: Install packages (I)
      block:
        - name: '[Darwin / Debian/Ubuntu]'
          ansible.builtin.package:
            name:
            # Misc.:
              - bison                 # Parser generator
              - flex                  # Generates lexical analyzers
              - shellcheck            # Lint bash scripts
              - bear                  # Generate compilation dbs  (when using e.g., `make`)
              - cppcheck              # Static analysis 4 detecting bugs (undefined behavior & dangerous coding constructs) in C src
              - flawfinder            # Finds potential security flaws in C src
            # Build tools/Compilers:
              - gcc
              - cmake
              - autoconf              # Tool 4 producing configure script 4 building, installing & packing SW
              - automake              # Automates parts of the compilation process
              - pkg-config
            # Assemblers:
              - nasm
            # Debuggers & Tools  (NOTE: binutils, util-linux & gdb are most likely already installed)
              - binutils              # Contains `readelf`, `gprof`, …
              - cloc                  # Count loc
              - doxygen               # Generates documentation from annotated C++ sources
              - sphinx-doc
              - binwalk
#              - poke                  # Extensible editor 4 structured binary data
            state: present
          become: '{{ package_manager_become }}'
        - name: '[Debian/Ubuntu]'
          ansible.builtin.apt:
            name:
            #  - LKM dev:
              - "linux-headers-{{ ansible_kernel }}"
              - "linux-tools-{{ ansible_kernel }}"
          ignore_errors: true                       # In case it's not a distro-kernel …
          when: ansible_facts.os_family != 'Darwin'
        - name: '[Debian/Ubuntu]'
          ansible.builtin.apt:
            name:
            # Git:
              - git-email    # ( optional )
            # Compilers, static analysis tools, …:
              - manpages-dev
              - build-essential       # Includes GDB, g++/GNU compiler collection, & some tools (`make`) & libraries required 2 compile a program
              - clang
              - clang-tools           # Includes `clang-check`~~, `clang-format` & `clang-tidy`~~
              - clang-tidy
              - clang-format
              - clangd                # Language server
            # Build tools:
              - cmake-curses-gui
              - autotools-dev
              - ninja-build
            # Debuggers & Tools  (NOTE: binutils, util-linux & gdb are most likely already installed):
              - gdb
              - bpftrace
              - strace
              - ltrace
              - bpfcc-tools           # BPF Compiler Collection (BCC) is a toolkit 4 creating efficient kernel tracing & manipulation programs
              - valgrind
              - massif-visualizer
            # 'Performance' analysis:
              - kcachegrind           # KDE GUI 2 visualize profiling data (mainly used as visualization frontend for data measured by Cachegrind/Callgrind tools from the Valgrind package)
              - hotspot               # UI (similar 2 KCachegrind 4 valgrind, BUT) around `perf`  (SEE: https://github.com/KDAB/hotspot)
              - heaptrack             # Heap analysis tool (from KDE)
              - heaptrack-gui
              - graphviz              # TODO: Apparently required by kcachegrind  ??
              - time                  # NOTE: Usually implemented as shell builtin  (hence must be called directly via `/usr/bin/time`)
              - pahole                # Shows & manipulates data structure layout
            # Utils:
              - numactl               # More powerful alternative to `taskset`  (useful on NUMA systems, incl. AMD CPUs w/ "chiplet" design;  `numastat`)
            # Libs:
              - libbsd-dev            # Provides `strlcat`(3), …
              - libc6-dbg             # Debugging symbols 4 libc6 (so we can get accurate tracebacks within libc)
              - binutils-dev          # Necessary 2 build programs which use the GNU BFD library  (which is part of binutils); also includes libbfd
              - libelf-dev            # Allows reading & writing of ELF files on a high level
              - libdw-dev             # Provides access to DWARF debug information stored inside ELF files
              - libdwarf-dev          # Allows reading/consuming and writing/producing of DWARF debugging information from object files, shared libraries, and executables    --  basically the same as `libdw-dev` ??!
              - libunwind-dev         # (libunwind)
              - libiberty-dev         # De-mangles C++ function names
              - libcap-dev            # Implements user-space interfaces 2 the POSIX 1003.1e capabilities
              - libnuma-dev           # Allows controlling specific NUMA (Non-Uniform Memory Architecture) scheduling or memory placement policies
              - libncurses5-dev       # ncurses  (terminal-independent method of updating character screens w/ reasonable optimization)
              - ncurses-dev
              - libreadline-dev       # Provides a set of functions for use by applications that allow users to edit command lines as they are typed in
              - libgtest-dev          # Google Test
              - openssl
              - libssl-dev
              - zlib1g-dev            # (zlib)
              - liblzma-dev           # (lzma)
              - zstd
              - libaio-dev            # (Linux kernel AIO access -> Enables userspace 1 use Linux kernel asynchronous I/O system calls, important 4 the performance of dbs & other advanced apps)
              - libboost-all-dev      # Boost
              - libomp-dev            # OpenMP
              - libcurl4-gnutls-dev
#              - libperl-dev           # Assists in developing applications which embed a Perl interpreter
              - libevent-dev          # Event notification library  (SEE: https://libevent.org/)
#              - python2
#              - python2-dev
#              - python-setuptools
              - libseccomp-dev        # Provides high level iface 4 constructing, analyzing & installing seccomp filters via a BPF (passed 2 kernel's `prctl`)
            # Misc.:
              - fakeroot              # Provides a fake root environment (2 remove the need 2 become root 4 a package build)
              - checksec              # Used 2 check properties of executables (like PIE, RELRO, PaX, Stack Canaries, PIE, RPATH, RUNPATH & compiler fortification) & kernel security options (like  GRSecurity & SELinux)
              - yad                   # Tool 4 creating graphical dialogs from shell scripts
            # Kernel dev -- "missing stuff":
            #  - Deps:
              - bc                    # Bench calculator (uses own algebraic language)
              - debhelper             # 4 creating `deb`ian packages (`bindeb-pkg` target)
              - cscope                # Interactive, text screen based source browsing tool
              - indent                # Format C code 2 follow kernel "styleguide"
            #  - Rust LKM:
              - libclang-dev
              - lld
              - llvm-dev
            # - "Convenience" tools:
              - exuberant-ctags       # Parses code, producing an index mapping the names of significant entities
            # - Static analysis:
              - sparse                # Semantic checker 4 finding potential problems w/ C kernel code (e.g., mixing pointers 2 user address space & pointers 2 kernel address space)
              - coccinelle
            # - Debugging:
              - crash                 # Kernel debugging utility (allowing gdb like syntax)
              - trace-cmd             # Retrieve & analyze function traces from the kernel  (essentially a wrapper over ftrace)
#              - lttng-tools           # Linux Trace Toolkit next generation (LTTng)
#              - lttng-modules-dkms        $$$$$  TODO: COMPILATION ERROR ON AARCH64
#              - liblttng-ust-dev
            # - Performance analysis:
              - stress                # Imposes load on & stress test a computer system
              - stress-ng
              - rt-tests              # Programs that test & measure various components of real-time kernel behavior (timer, signal & HW latency) + functioning of priority-inheritance mutexes
              - tuna                  # Low-level system performance tuning 4 realtime systems (change the attributes of application & kernel threads, IRQs, CPUs, & CPU sockets => can change scheduling policy, scheduler priority & processor affinity 4 processes & process threads, processor affinity 4 interrupts, isolate CPUs, & spread threads or IRQs across CPUs)
              - perf-tools-unstable   # ???????
            # - Misc.
              - man-db                # ???????
              - kmod                  # 4 controlling Linux Kernel modules
              - asciidoc
              - gnuplot
              - sysfsutils            # Sysfs query tool & boot-time setup   ????
              - bsdextrautils         # BSD utilities like `col`, `colcrt`, `colrm`, `column`, `hd`, `hexdump`, `look`, `ul` & `write`
              - smem                  # Reports memory usage
              - hwloc                 # HW Locality -- Provides a hierarchical view of the machine, NUMA memory nodes, sockets, shared caches, cores & simultaneous multithreading
              - virt-what             # Script which detects whether it's running in a VM
            state: present
          when: ansible_facts.os_family != 'Darwin'
        - name: '[Debian/Ubuntu amd64]'
          ansible.builtin.apt:
            name:
              - gcc-multilib          # Useful 4 cross-compiling
            state: present
          when: ansible_architecture == 'x86_64' and ansible_facts.os_family != 'Darwin'
        - name: '[Ubuntu]'
          ansible.builtin.apt:
            name:
              - glibc-tools                   # Contains ’libSigSegv’ library (SEE: https://lemire.me/blog/2023/05/01/under-linux-libsegfault-and-addr2line-are-underrated/)
              # 'Performance' analysis
#              - linux-tools-generic   # Kernel modules required 4 `perf`
#              - linux-tools-common    # `perf`  (Performance analysis tools for Linux)
          when: ansible_facts.os_family == 'Ubuntu'
        - name: '[Darwin]'
          community.general.homebrew:
            name:
              - llvm                  # TODO: Install only `clang[++]`, `clang-format`, `clang-tidy`  (NOTE: `bin` dir must be added 2 `$PATH`)
              - boost
              - ncurses               # Text-based UIs (TUIs)
            # Build tools:
              - ninja
            # Libs:
              - readline
              - googletest            # Google Test
          become: false
          when: ansible_facts.os_family == 'Darwin'

    - name: '[Ubuntu] Install proprietary extra stuff (codecs, fonts, …)'
      ansible.builtin.apt:
        name: ubuntu-restricted-extras
      when: ansible_facts.os_family == 'Ubuntu'

    - name: '`clang-format` config'
      ansible.builtin.template:
        src: clang-format.j2
        dest: '/{{ os_homedir }}/{{ user.name }}/.clang-format'
        owner: '{{ user.name }}'
        group: '{{ user.group_name }}'
        mode: 0644
      become: false

    # TODO: Switch 2 `rustup`   +  install clippy
    - name: Rust toolchain
      block:
        - name: Ensure cargo bin dir exists    # (2 avoid shell errors)
          ansible.builtin.file:
            path: '{{ os_homedir }}/{{ user.name }}/.cargo/bin/'
            owner: '{{ user.name }}'
            group: '{{user.group_name}}'
            state: directory
            mode: 0775
        - name: "Check installed via `rustup`"
          ansible.builtin.command: 'which {{ os_homedir }}/{{ user.name }}/.cargo/bin/rustup'
          failed_when: false
          changed_when: false
          check_mode: false
          register: result_rustup_command
        - name: Install
          block:
            - name: '[Debian/Ubuntu]'
              ansible.builtin.apt:
                name:
                  - rustc
                  - cargo
                  - rustfmt               # NOTE: Already "recommended" by `cargo` package
              when: ansible_facts.os_family != 'Darwin'
            - name: '[Darwin]'
              community.general.homebrew:
                name:
                  - rust
                  - rust-analyzer         # TODO: Install also on Debian
                  - rustfmt
              become: false
              when: ansible_facts.os_family == 'Darwin'
          when: result_rustup_command.rc == 1
      become: false

    - name: Install gef (4 `gdb`)
      block:
        - name: gef - Check whether already installed     # TODO: Always update if not latest version
          ansible.builtin.find:
            paths: '/{{ os_homedir }}/{{ user.name }}/'
            file_type: file
            use_regex: true
            hidden: true
            patterns: '^\.gef-20\d{2}\.(0[1-9]|1[012])\.py$'
          register: gef_find_output
        - name: gef - Run install script
          ansible.builtin.shell:
            cmd: 'bash -c "$(curl -fsSL https://gef.blah.cat/sh)"'
          become: false
          when: (gef_find_output.files | length == 0)
      when: ansible_facts.os_family != 'Darwin'
  become: true



# TODO: …
#- name: Install Eclipse Trace Compass
#  block:
#    - name: Determine stuff
#      block:
#        - name: '[Darwin]'
#          ansible.builtin.set_fact:
#            java_package: openjdk
#            tracecompass_package_os: macosx.cocoa
#            tracecompass_package_arch: '{{ "aarch64" if cpu_arch == "arm64" else cpu_arch }}'
#            tracecompass_install_path: /Applications/Development/
#            tracecompass_install_become: false
#          when: ansible_facts.os_family == 'Darwin'
#        - name: '[Ubuntu/Debian]'
#          ansible.builtin.set_fact:
#            java_package: openjdk-17-jdk
#            tracecompass_package_os: linux.gtk
#            tracecompass_package_arch: '{{ cpu_arch }}'
#            tracecompass_install_path: /opt/
#            tracecompass_install_become: true
#          when: ansible_facts.os_family != 'Darwin'
#    - name: Install Java
#      ansible.builtin.package:
#        name: '{{ java_package }}'
#      become: '{{ package_manager_become }}'
#    - name: Check if already installed
#      ansible.builtin.stat:
#        path: '{{ tracecompass_install_path }}/trace-compass'
#      register: result_tracecompass_exists
#      become: false
#    - name: Install it
#      block:
#        - name: "Download & 'install'"
#          ansible.builtin.unarchive:
#            src: 'https://www.eclipse.org/downloads/download.php?file=/tracecompass/stable/rcp/trace-compass-{{ tracecompass_version }}-{{ tracecompass_package_os }}.{{ tracecompass_package_arch }}.tar.gz'   # TODO: ALWAYS LATEST VERSION
#            dest: '{{ tracecompass_install_path }}'
#            remote_src: yes
#          become: '{{ tracecompass_install_become }}'
#        # TODO: Create .desktop file on Gnome
#      when: result_tracecompass_exists.stat.exists == false
#  when:
#    - not ansible_facts.os_family == 'Darwin'     # DON'T install on Darwin atm
#    - not (ansible_facts.os_family != 'Darwin' and ansible_architecture != 'x86_64')  # $$$$$$$$$$$$$$$$$ TODO: RMV ONCE ARM IS SUPPORTED



- name: Install G00g13 bazel
  block:
    - name: '[Ubuntu/Debian]'
      block:
        - name: bazel - Install dependencies
          ansible.builtin.apt:
            update_cache: true
            name:
              - apt-transport-https
              - curl
              - gnupg
        - name: bazel - Add apt signing key
          ansible.builtin.apt_key:
            url: https://bazel.build/bazel-release.pub.gpg
            keyring: /usr/share/keyrings/bazel-archive-keyring.gpg
            state: present
        - name: bazel - Add apt repo and update cache
          ansible.builtin.apt_repository:
            repo: "deb [arch={{ deb_cpu_arch }} signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8"
            filename: bazel
            state: present
            update_cache: true
      become: true
      when:
        - ansible_facts.os_family != 'Darwin'
    - name: Install it
      ansible.builtin.package:
        name: bazel
      become: '{{ package_manager_become }}'
  when:
    - not (ansible_facts.os_family != 'Darwin' and ansible_architecture != 'x86_64')  # $$$$$$$$$$$$$$$$$ TODO: RMV ONCE ARM IS SUPPORTED


#- name: Install Intel Pin Tools
#  block:
#    - name: Set version
#      ansible.builtin.set_fact:
#        # TODO: GET ALWAYS LATEST VERSION;  SEE: https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html
#        intel_pin_tool_version: pin-3.25-98650-g8f6168173-gcc-linux
#        intel_pin_tools_dir: /opt/intel
#    - name: Check already installed
#      ansible.builtin.command: 'which {{ intel_pin_tools_dir }}/{{ intel_pin_tool_version }}/pin'
#      failed_when: false
#      changed_when: false
#      check_mode: false
#      register: result_pin_command
#      become: false
#    - name: Install if not installed
#      block:
#        - name: Ensure dir exists
#          file:
#            path: "{{ intel_pin_tools_dir }}/"
#            state: directory
#            mode: 0755
#        - name: Download & Install Pin tools
#          ansible.builtin.unarchive:
#            src: 'https://software.intel.com/sites/landingpage/pintool/downloads/{{ intel_pin_tool_version }}.tar.gz'
#            remote_src: true
#            dest: "{{ intel_pin_tools_dir }}/"
#            mode: 0755
#        - name: Update PATH variable globally
#          ansible.builtin.lineinfile:
#            dest: /etc/zsh/zshenv
#            line: |
#              if [[ "$PATH" != *"{{ intel_pin_tools_dir }}/{{ intel_pin_tool_version }}"* ]]; then
#                  export PATH="$PATH:{{ intel_pin_tools_dir }}/{{ intel_pin_tool_version }}"
#              fi
#      when: result_pin_command.rc == 1
#      become: true
#  when: ansible_architecture == "x86_64"
#  become: false

# Installation steps: https://www.intel.com/content/www/us/en/develop/documentation/vtune-install-guide/top/linux/package-managers.html
#- name: Install VTune
#  block:
#    - name: Add apt repo
#      # NOTE: Equivalent command: `sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"`
#      ansible.builtin.apt_repository:
#        repo: deb https://apt.repos.intel.com/oneapi all main
#        state: present
#        filename: intel
#        update_cache: true
#    - name: Install VTune
#      ansible.builtin.apt:
#        name: intel-oneapi-vtune
#  when: ansible_architecture == "x86_64"
#  become: true
