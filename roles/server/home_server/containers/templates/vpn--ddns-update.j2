#!/usr/bin/env python3

{{ ansible_managed|comment }}
"""
Essentially only updates IPv6 prefix   (as we ~~use Privacy Extensions~~, but Fritzbox allows only fixed IF-ID)

                !!!  IMPORTANT: Must run (if run in Docker) w/ `network_mode: host`  !!!
"""

import os
import sys
import netifaces as ni
import requests
import time
import datetime


LOG_DATE_FORMAT = '%Y-%m-%d %H:%M:%S'

if __name__ == "__main__":
    print(f"[{ datetime.datetime.now().strftime(LOG_DATE_FORMAT) }] Running as user '{os.path.split(os.path.expanduser('~'))[-1]}' on '{os.uname()[1]}'")

    prior_ip = None
    while True:
        print(f"[{ datetime.datetime.now().strftime(LOG_DATE_FORMAT) }] Checking 4 IPv6 IF-ID \"{ {{ vpn.ddns.if_ipv6_id }}'.replace('::', '') }\" on \"{{ vpn.if }}\" â€¦")
        for ip in ni.ifaddresses('{{ vpn.if }}')[ni.AF_INET6]:
            if any( ip['addr'].startswith(x) for x in ['fd', 'fe80'] )   or   '{{ vpn.ddns.if_ipv6_id }}'.replace('::', '') not in ip['addr']: continue

            if prior_ip != ip['addr']:
                try:
                    with requests.get(  "{{ vpn.ddns.update_url }}".format(domain="{{ vpn.ddns.domain }}", token="{{ vpn.ddns.pass }}", ip6addr=ip['addr']),
                                        timeout=3  ) as r:
                        r.raise_for_status()
                except (requests.exceptions.HTTPError, requests.exceptions.ConnectionError, requests.exceptions.Timeout, requests.exceptions.RequestException) as e:
                    print(f"[{ datetime.datetime.now().strftime(LOG_DATE_FORMAT) }] Update failed:  ", e, file=sys.stderr)
                    break
                prior_ip = ip['addr']
                print(f"[{ datetime.datetime.now().strftime(LOG_DATE_FORMAT) }] Updated '{{ vpn.ddns.domain }}' -- new addr: { prior_ip }")
            break

        if prior_ip == None:
            print(f"[{ datetime.datetime.now().strftime(LOG_DATE_FORMAT) }] NO MATCHING ADDRESS ON IF \"{{ vpn.if }}\"  (expected IPv6 IF-ID \"{{ vpn.ddns.if_ipv6_id }}\")", file=sys.stderr)

        time.sleep({{ vpn.ddns.update_interval_sec }})
