---
- name: Setup container
  ansible.builtin.include_tasks: setup_containers.yml
  loop_control:
    loop_var: container
  with_items:
    - name: pihole                                           # TODO SSO: N/A atm
      compose:
        services:
          - name: pihole
            image: pihole/pihole
            autoupdate_disabled: true
            network:
              ports:
                - "{{ pihole.ipv4[:-3] }}:53:53/udp"         # IP addr must be specified as Ubuntu Server uses systemd-resolve which binds 2 `localhost:53` => by binding 2 IF_ANY we get a conflict  (SEE: https://github.com/sameersbn/docker-bind/issues/65)
                - "[{{ pihole.ipv6_ula[:-3] }}]:53:53/udp"
                - "{{ pihole.ipv4[:-3] }}:53:53/tcp"
                - "[{{ pihole.ipv6_ula[:-3] }}]:53:53/tcp"
              # 67 = DHCP  (-> TODO: could be uncommented  ???):
                - "{{ pihole.ipv4[:-3] }}:67:67/udp"
                - "[{{ pihole.ipv6_ula[:-3] }}]:67:67/udp"
#              # Admin-interface  (ports not necessary since we use reverse proxy):
#                - 80:80/tcp
#                - 443:443/tcp
              reverse_proxy_mappings:
                - subdomain: pihole
                  port: 80
            volumes:
              - path: '{{ docker_container.data_basedir }}/pihole/hole/:/etc/pihole/'
              - path: '{{ docker_container.data_basedir }}/pihole/dns/:/etc/dnsmasq.d/'
            security:
              allow_priv_esc: True
              use_root: True
              cap_add:
                - NET_ADMIN
            env_vars:
              # REFERENCE: https://github.com/pi-hole/docker-pi-hole#environment-variables
              - TZ={{ timezone }}
              - 'PIHOLE_DNS_={{ pihole.dns_servers|join(";") }}'
              - 'DNSMASQ_LISTENING=single'
              - 'INTERFACE={{ pihole.if }}'
              - 'IPv6=true'
              - FTLCONF_RATE_LIMIT='0/0'                       #  TODO: Workaround as all IPv6 requests arrive w/ same saddr (due 2 sNAT); NOTE: Might still hit limit on inet outage
              - 'WEBPASSWORD={{ pihole.web_pw }}'
              - 'PROXY_LOCATION=pihole'
              - 'VIRTUAL_HOST=pihole.{{ domainname }}'
              - VIRTUAL_PORT=80
              - 'REV_SERVER=true'                              # NOTE: Makes only sense when pihole isN'T acting as DHCP server
              - REV_SERVER_TARGET={{ pihole.router_ip }}
              - REV_SERVER_DOMAIN={{ pihole.router_domain }}
              - REV_SERVER_CIDR={{ pihole.router_reverse_dns_zone }}
