---
#
# TODO: KNOWN ISSUES:
#   - No IPv6 Privacy Extensions (SEE vpn--netplan_rules.yml.j2)
#   - Occasional ddns outages   (SOLUTION: Buy an own domain e.g., on https://namecheap.com / CON: Requires ddclient rewrite)
#   - wireguard-ui BUG: ALL clients must be created BEFORE the initial 'apply config' + first restart (via `docker compose down` & `up` again)  (otherwise the newly created client (after the initial 'apply config') isn't considered ??!)
#
- name: Networking
  block:
    # VERIFY: `networkctl status`
    - name: "[netplan] Add 'stable' global IPv6 addr"
      ansible.builtin.template:
        src: vpn--netplan_rules.yml.j2           # TODO: INLINE ONCE SUPPORTED BY MODULE
        dest: /etc/netplan/10-wireguard_vpn.yaml
        mode: 0600
      notify: Applying Netplan Configuration
      when: ansible_facts.distribution == 'Ubuntu'
    # VERIFY: `sudo lsmod |grep ip6table_filter`
    # EQUIVALENT COMMAND: `sudo modprobe <module>` & adding entry in `/etc/modules` (or `/etc/modprobe.d/`)
    - name: Add kernel module 4 IPv6 connectivity
      community.general.modprobe:
        name: ip6table_filter
        state: present
        persistent: present
  become: true



## VERIFY
##   - ACCESSABILITY (whether port open + service running):
##     - MOCK (if wireguard isn't running):
##       - NATIVE: `sudo -b sh -c 'ncat -6 -u -l [<IPv6-addr>] 123   -e /bin/cat -k'`   (on client: `ncat -6 -u <IPv6-addr> 123`)
##       - DOCKER CONTAINER: `docker run -d --network=wireguard_vpn --name test_avail -p 123:123/udp nicolaka/netshoot nc -6 -u -l -p 123`
##     - VERIFY port 'binding' on server: `sudo lsof -i -P -n |grep 123`
##     - VERIFY via tcpdump: `sudo tcpdump -n -i eth0  udp port 123  -XAvvv`
##     - VERIFY from client (!! from different network, e.g., cellular network !!): `ncat -6 -u <domain> 123`
##   - TRAFFIC: `ping 8.8.8.8` on client  &  `sudo tcpdump -envi wg0 host 8.8.8.8` (… on server)
#- name: Ensure container is running
#  community.docker.docker_compose:
#    project_src: '{{ docker_container.config_basedir }}/{{ container.name }}/'
#    build: true
#  become: false
- name: Setup container
  ansible.builtin.include_tasks: setup_containers.yml
  loop_control:
    loop_var: container
  with_items:
    - name: vpn
      config_files:
        - name: ddns-update
          mode: '0755'
        - name: ddns-Dockerfile
      startup: False
      compose:
        networks: |+
          vpn:
              name: wireguard_vpn
              enable_ipv6: true
              ipam:
                config:
                  - subnet: '{{ docker_ipv6_conf.prefix }}:2::/{{ (docker_ipv6_conf.prefix_cidr + 16)|int }}'
        services:
          - name: ddclient
            _include_in_compose: '{{ vpn.ddns is defined|bool }}'
#            image: lscr.io/linuxserver/ddclient:latest
            image: ddclient
            image_build:
              ctx: .
              df: ddns-Dockerfile
            network:
              mode: host
            env_vars:
              -  TZ={{ timezone }}

          - name: wireguard
            image: linuxserver/wireguard:latest
            volumes:
              - path: '{{ docker_container.data_basedir }}/vpn/wg/:/config/'
            restart_policy: unless-stopped          # Required 4 wireguard-ui 2 manage the container (`WGUI_MANAGE_START`)
            security:
              use_root: True
              cap_add:
                - NET_ADMIN
#                - SYS_MODULE
            network:
              nets: ['vpn']
              ports:
                # Wireguard server   (DEFAULT PORT: 51820)
                - '{{ vpn.endpoint.port }}:{{ vpn.endpoint.port }}/udp'
                # Wireguard UI   -->  Access GUI via: `ssh -L 8080:127.0.0.1:8080 l0-rpi0`  (ALTERNATIVE: use traefik ––––––––  WHICH WON't WORK aS LONG AS We DON'T USE ITS NETWORK)
                - '127.0.0.1:{{ vpn.wireguard_ui.local_port|default(8080, true) }}:5000/tcp'
            sysctls:
              #  $$$$$$   TODO: ONLY AFFECTS CONTAINER (NOT HOST-SYSTEM)  => NAMESPACE CGROUPS ???    $$$$$$
              # REFERENCE: https://www.kernel.org/doc/html/latest/networking/ip-sysctl.html
              #            https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt
              # Enable IPv6
              - net.ipv6.conf.all.disable_ipv6=0
              # Enable packet forwarding
              - net.ipv4.ip_forward=1
              - net.ipv6.conf.all.forwarding=1
              # ?
              - net.ipv4.conf.all.src_valid_mark=1
              # Accept Router Advertisements (RAs;  0 = don't accept, 1 = accept if forwarding is DISABLED; 2 = accept even IF forwarding is enabled)
              - 'net.ipv6.conf.{{ vpn.if }}.accept_ra=2'
              # How link-local- & autoconf addresses are generated (`0` = EUI64)
              - net.ipv6.conf.default.addr_gen_mode=0
              - 'net.ipv6.conf.{{ vpn.if }}.addr_gen_mode=0'
              # Disable *Privacy Extensions*
              - 'net.ipv6.conf.{{ vpn.if }}.use_tempaddr=0'
              - net.ipv6.conf.default.use_tempaddr=0
              - net.ipv6.conf.all.use_tempaddr=0
            # REFERENCE: https://docs.linuxserver.io/images/docker-wireguard/#environment-variables-e
            env_vars:
              - TZ={{ timezone }}
              - PUID={{ www_user.uid }}
              - PGID={{ www_user.gid }}

          - name: wireguard-ui
            image: ngoduykhanh/wireguard-ui:latest
            entrypoint: ./wg-ui --disable-login
            security:
              use_root: True
              cap_add:
                - NET_ADMIN
            network:
              mode: service:wireguard
            volumes:
              - path: '{{ docker_container.data_basedir }}/vpn/wg-ui/:/app/db/'
              - path: '{{ docker_container.data_basedir }}/vpn/wg/:/etc/wireguard/'
            # REFERENCE: https://github.com/ngoduykhanh/wireguard-ui#environment-variables
            env_vars:
              # TODO: SSO
              # UI
              - 'WGUI_USERNAME={{ vpn.wireguard_ui.user|default("gg", true) }}'   # Required 4 db init
              - 'WGUI_PASSWORD={{ vpn.wireguard_ui.pass|default("1", true) }}'
#              - 'SESSION_SECRET=XX vpn.wireguard_ui.session_secret XX'
              - 'WGUI_LOG_LEVEL={{ vpn.wireguard_ui.log_level }}'
              # Start / restart wireguard container w/ this container
              - WGUI_MANAGE_START=true
              - WGUI_MANAGE_RESTART=true
              # Wireguard conf file (wg0.conf)
#              - WG_CONF_TEMPLATE
              # Server Tunnel
              - WGUI_SERVER_LISTEN_PORT={{ vpn.endpoint.port }}
              - WGUI_ENDPOINT_ADDRESS={{ vpn.endpoint.domain }}:{{ vpn.endpoint.port }}
              - WGUI_SERVER_INTERFACE_ADDRESSES={{ vpn.internal_networks|map(attribute='server')|join(',') }}
              - WGUI_DNS={{ vpn.internal_networks|map(attribute='dns')|join(',') }}
              # OVERHEAD: IPv4: 20 bytes / IPv6: 40 bytes, UDP: 8 bytes, WG: 32 bytes   //   MTU: Cable = 1500, DSL = 1492
              - WGUI_MTU={{ vpn.wireguard_mtu|default(1450, true) }}
              # ( Don't route inet traffic (by default) through tunnel   --> {# `{% for network in NETWORK_VAR %}{{ network.subnet }},{{ "%s0/%s"|format(network.server[:-4], network.server.split("/")[1]) }}{{ "" if loop.last else "," }}{% endfor %}` ) #}
              - WGUI_DEFAULT_CLIENT_ALLOWED_IPS=0.0.0.0/0,::/0
              # Rules 4 forwarding from VPN subnet 2 actual network
              - WGUI_SERVER_POST_UP_SCRIPT=iptables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o {{ vpn.if }} -j MASQUERADE; ip6tables -t nat -A POSTROUTING -o {{ vpn.if }} -j MASQUERADE
              - WGUI_SERVER_POST_DOWN_SCRIPT=iptables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o {{ vpn.if }} -j MASQUERADE; ip6tables -t nat -D POSTROUTING -o {{ vpn.if }} -j MASQUERADE
              # MAILING
              - SMTP_HOSTNAME={{ notifications_mail.smtp_host }}
              - SMTP_PORT={{ notifications_mail.smtp_port }}
              - SMTP_USERNAME={{ notifications_mail.smtp_username }}
              - SMTP_PASSWORD={{ notifications_mail.smtp_password }}
              - SMTP_AUTH_TYPE={{ notifications_mail.smtp_auth_type|upper  }}
              - SMTP_ENCRYPTION={{ notifications_mail.smtp_enc|upper }}
              - EMAIL_FROM_ADDRESS={{ notifications_mail.smtp_username }}
#              - EMAIL_FROM_NAME="WireGuard UI"
