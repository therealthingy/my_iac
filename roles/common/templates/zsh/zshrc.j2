# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.config/zsh/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    zsh-autosuggestions
    zsh-syntax-highlighting
    colored-man-pages
    git
{% if ansible_facts.os_family == 'Darwin' %}
#    gnu-utils   # TODO: DOESN'T WORK ?!??!?!?!?!
##    macos
{% endif %}
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"
{% if 'clients_devel' in group_names or 'servers_devel' in group_names %}
export MAKEFLAGS="-j"
{% endif %}

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.config/zsh/.oh-my-zsh"


# --- Powerlevel10k
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
[[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh



################################################################################################
# --- MY STUFF …
################################################################################################
# - Completions
autoload -Uz compinit && compinit

{% if ansible_facts.os_family == 'Darwin' and
      cpu_arch == 'arm64' %}
# -- homebrew (due 2 ARM) --
export PATH=/opt/homebrew/bin:/opt/homebrew/sbin:$PATH
export LIBRARY_PATH="$LIBRARY_PATH:/opt/homebrew/lib"
{% endif %}

{% if ansible_facts.os_family != 'Darwin'  and
      ('clients_devel' in group_names or 'servers_devel' in group_names) %}
# --  Launch GLOBAL ssh-agent  --
# ( works in conjunction w/ '~/.config/systemd/user/ssh-agent.service' )
# ( VERIFY: 'pgrep ssh-agent'  OR  'ssh-add -l' )
export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
{% endif %}

{% if ansible_facts.os_family != 'Darwin' %}
# Fix annoying "bug": "X11 connection rejected because of wrong authentication.\n(timeshift-gtk:50030): Gtk-WARNING **: 14:33:10.933: cannot open display:"  (SEE: https://unix.stackexchange.com/a/742448)
export XAUTHORITY=$HOME/.Xauthority
{% endif %}

{# TODO -- DARWIN: Seems 2 work only w/ GNU ls  => must bind 2 GNU utils using gnu-utils#}
{% if ansible_facts.os_family != 'Darwin' %}
# LS_COLORS 4 ls & completion suggestions
source "${ZDOTDIR}/lscolors.sh"
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
{% endif %}



# - Custom functions + aliases
# =================================================================================================================
# ========================================   Function/Alias definitions   =========================================
# =================================================================================================================
# =========================== Global shell functions ===========================
####
#
# Substitute for 'history -c' (which is available in bash)
#
history-clear() {
    local HISTSIZE=0
    : > $HISTFILE

    unset HISTSIZE
}

####
# Checks & adds path to `PATH` variable if path exists (warns otherwise that path doesn't exist)
#
# @param 1: Path to be added to PATH var
# @param 2: Defines whether new path should be prepended or appended (by using 'after')
#
path-add() {
    newelement=${1%/}

    if [ ! -d "$1" ]; then
        echo -e "\e[1;31;49mPath '$1' can't be added to path b/c it doesn't exist!\e[0m\n"
    fi

    if ! echo $PATH | grep -E -q "(^|:)$newelement($|:)"; then
        if [ "$2" = "after" ]; then
            PATH="$PATH:$newelement"
        else
            PATH="$newelement:$PATH"
        fi
    fi
}

####
# Removes path from `PATH` variable
#
# @param 1: Path to be removed from PATH var
#
path-rm() {
    PATH="$(echo $PATH | sed -e "s;\(^\|:\)${1%/}\(:\|\$\);\1\2;g" -e 's;^:\|:$;;g' -e 's;::;:;g')"
}

####
# Checks & exports alias(es) if command exists (warns otherwise that command doesn't exist)
#
# @param 1 (required_command): The command which is used by alias (will be checked for presence)
# @param 2…n (alias): Will be validated & exported, if valid …
#
alias-add() {
    readonly required_command=${1:?"The 'required_command' may be specified."}
    : ${2:?"At least 1 alias may be specified."}

    shift

    if ! command -v ${required_command} > /dev/null; then
        echo -e "\e[1;31;49mThe required '${required_command}' command doesn't exist, not exporting alias(es)…\e[0m\n"
        return
    fi

    for alias in "$@"; do
        if [[ "$alias" =~ ^.+=.+$ ]]; then
            alias "$alias"
        else
            echo -e "\e[1;31;49mThe alias '$alias' seems to be invalid, not exporting …\e[0m\n"
        fi
    done
}

# =========================== Aliases  (TODO: SHOULD be in '.zshenv') ===========================
# - 'Default' commands -
alias sudo='sudo '                 # Only 1st word of command is checked for aliases by shell, any following aren't checked
                                   #  -> E.g. in 'sudo ll', only the first word ('sudo') is checked for alias, 'll' isn't checked
                                   #  => Can be fixed by telling shell to check next word after the alias (i.e 'sudo') by adding a space to the end of the alias value

{% if ansible_facts.os_family == 'Darwin' %}
alias stat='stat -x'
{% endif %}

#alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'

# - 'Shortcuts' -
#alias zsh-update="source ~/.zshrc"

alias d='dirs -v | head -10'    # USAGE: cd ~<number> -or- enter <number> directly

alias l='ls -lahF {{ "--color=auto" if ansible_facts.os_family != "Darwin" else "-G" }}'
alias ll='ls -lhF {{ "--color=auto" if ansible_facts.os_family != "Darwin" else "-G" }}'

{% if ansible_facts.os_family == 'Darwin' %}
alias-add gsed decolorize='gsed -r "s/\\x1B\\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"'
{% else %}
alias decolorize='sed -r "s/\\x1B\\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"'
{% endif %}

alias dusage='du -h -d1'

alias inet-pg="echo 'Pinging Google' && ping 8.8.8.8"
alias inet-pip="echo 'Public IP:' && curl -4 icanhazip.com && curl -6 icanhazip.com; echo"


{% if ansible_facts.os_family != 'Darwin' %}
{%   if ansible_facts.os_family == 'Debian' %}
# - apt -
alias agi='sudo apt-get install' #<packages>
alias agu='sudo apt-get update'
alias ags='sudo apt-cache search' #<string-in-package-name-or-descr>
alias agsh='sudo apt-cache show' #<string>
alias agr='sudo apt-get remove' #<packages>
alias agd='sudo apt-get dist-upgrade'
alias agc='sudo apt-get clean'
alias agac='sudo apt-get autoclean'
alias agud='agu && agd'

# - `journalctl` -
# jlog: current boot only, everything
alias jlog='/bin/journalctl -b --all --catalog --no-pager'
# jlogr: current boot only, everything, *reverse* chronological order
alias jlogr='/bin/journalctl -b --all --catalog --no-pager --reverse'
# jlogall: *everything*, all time; --merge => _all_ logs merged
alias jlogall='/bin/journalctl --all --catalog --merge --no-pager'
# jlogf: *watch* log, 'tail -f' mode
alias jlogf='journalctl -f'
# jlogk: only kernel messages, this boot
alias jlogk='journalctl -b -k --no-pager'
{%   endif %}

{%   if hw_is_rpi == True %}
# --- RPi specific ---
alias temp='vcgencmd measure_temp'
{%   endif %}

{%   if 'clients_devel' in group_names or 'servers_devel' in group_names %}
alias-add objdump obj="objdump -M intel -C --visualize-jumps -d "               # Note: Used 2 be fct. w/ (now removed) suffix: `$@ | nvim -`
{%   endif %}
{% endif %}


{% if ansible_facts.os_family == 'Darwin' %}
alias-add brew brew-up="brew update && brew upgrade ; brew cleanup ; brew doctor"

alias dns-flush="sudo dscacheutil -flushcache ; sudo killall -HUP mDNSResponder"
alias network-disable_packet_filter="sudo pfctl -d"    # Disable Eddie network lock

alias backup_poweroff="sudo sh -c 'tmutil startbackup --block && shutdown -h +1'"

alias clipbrd-text_2_lower='echo $(pbpaste) | tr "[A-Z]" "[a-z]" | pbcopy'
alias clipbrd-text_2_upper='echo $(pbpaste) | tr "[a-z]" "[A-Z]" | pbcopy'

#alias app-open_all="find /Applications ~/Applications -type d -name '*.app' -prune -exec open -a {} \;"

#alias finder-show_hiddenfiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
#alias finder-hide_hiddenfiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'

# - GNU/Linux commands -
alias poweroff='/sbin/shutdown -h now'
alias reboot='/sbin/shutdown -r now'
{% endif %}



# --- Installed tools  ---
export PATH="$PATH:$HOME/.local/bin"

{% if ansible_facts.os_family != 'Darwin' %}
# - dmesg
alias dmesg='/bin/dmesg --decode --nopager --color --ctime'
{% endif %}

# - `git` -
alias gitdiff='git diff -r'
alias gitfiles='git diff --name-status -r'
alias gitstat='git status ; echo ; git diff --stat -r'
alias giturl='git remote get-url --all origin'
alias gitlog='git log --graph --pretty=format:"%h: %ar: %s" --abbrev-commit'

{% if 'clients_media' in group_names    or ansible_facts.os_family == 'Darwin' %}
# - `yt-dlp` -
alias-add yt-dlp   video-dl="yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'"   video-dl_audio="yt-dlp -f 'bestaudio[ext=m4a]'"
alias-add video-dl video-dl-channel="video-dl  -o '%(channel)s - %(title)s-%(id)s.%(ext)s'"
alias-add video-dl video-dl-workaround_fname="video-dl  -o '%(title).200s  [%(id)s].%(ext)s'"         # WORKAROUND 4: https://github.com/yt-dlp/yt-dlp/issues/1136#issuecomment-932077195
{% endif %}

{% if ansible_facts.os_family == 'Darwin' %}
# - `hblock` -
alias-add hblock hblock-enable="hblock -H /etc/hblock.d/header -A /etc/hblock.d/whitelist.list -D /etc/hblock.d/blacklist.list"
alias-add hblock hblock-disable="hblock -S none -D none"
{% endif %}

# - Replace existing commands -
alias-add pigz gzip='pigz' gunzip='unpigz'
alias-add pbzip2 bzip2='pbzip2' # bunzip2='pbunzip2' bzcat='pbzcat'
{% if ansible_facts.os_family == 'Darwin' %}
alias xz='xz -T 0'                                                            # Use max # of threads

alias-add colordiff diff='colordiff'
{% endif %}

# =========================== Functions ===========================
{% if ansible_facts.os_family == 'Darwin' %}
dns-reset_server_for_service() {
    local network_service=${1:?"Network service may be provided."}
    sudo networksetup -setdnsservers $network_service "Empty"
}


if command -v duti > /dev/null; then
    app-set_as_default_for_extension() {
        local app_path=${1:?"Path to app may be provided."}
        local file_extension=${2:?"File extension may be specified."}

        local app_cfbid
        if ! app_cfbid=`mdls -name kMDItemCFBundleIdentifier -r $app_path`; then
            echo "The provided app-path \"$app_path\" may be invalid."
            return 1
        fi

        if `duti -s $app_cfbid $file_extension all`; then
            echo "OK - Set \"$app_cfbid\" for file extension \"$file_extension\""
        else
            echo "FAIL - Couldn't set \"$app_path\" for file extension \"$file_extension\""
            return 1
        fi
    }
fi
{% endif %}


{% if 'clients_devel' in group_names or 'servers_devel' in group_names    or ansible_facts.os_family == 'Darwin' %}
if command -v ssh-keygen > /dev/null; then
    ssh-key_generate() {
        readonly GLOBAL_SSH_KEYS_PATH="$HOME/.ssh"
        readonly SSH_CONFIG_FILE="$GLOBAL_SSH_KEYS_PATH/config"

        local ssh_filename=''
        vared -p 'Enter filename for ssh-key pair: ' -c ssh_filename

        local q_add_identity_file='y'
        read "q_add_identity_file?Store keys in $SSH_CONFIG_FILE and add entry in config [Y/n]? "
        local export_file_path=/dev/null
        if [ "$q_add_identity_file" = "n" ]; then
            export_file_path=$(pwd)/$ssh_filename
        else
            export_file_path=$GLOBAL_SSH_KEYS_PATH/$ssh_filename

            # Create files / folder anyway + set permissions
            mkdir $GLOBAL_SSH_KEYS_PATH 2> /dev/null
            chmod 700 $GLOBAL_SSH_KEYS_PATH
            touch $SSH_CONFIG_FILE $GLOBAL_SSH_KEYS_PATH/authorized_keys $GLOBAL_SSH_KEYS_PATH/known_hosts
            chmod 644 $SSH_CONFIG_FILE $GLOBAL_SSH_KEYS_PATH/authorized_keys $GLOBAL_SSH_KEYS_PATH/known_hosts
        fi

        local ssh_comment=''
        vared -p 'Enter comment for ssh-key pair: ' -c ssh_comment
        ssh-keygen -t ed25519 -C $ssh_comment -f $export_file_path

        if [ "$q_add_identity_file" != "n" ]; then
            chmod 600 $export_file_path
            chmod 644 $export_file_path.pub

            local ssh_username=''
            vared -p 'Enter username for config file: ' -c ssh_username
            local ssh_host=''
            vared -p 'Enter host for config file: ' -c ssh_host

            local keyring_entry='n'
            read "keyring_entry?Shall we store pw in keyring (if encrypted) [y/N]? "
            if [ "$keyring_entry" != "y" ]; then
                keyring_entry=""
            else
                # NOTE: - AddKeysToAgent = Automatically "do" ssh-add
{% if ansible_facts.os_family == 'Darwin' %}
                #       - UseKeychain = Store passphrases in the macOS keychain
                keyring_entry="  UseKeychain yes\n  AddKeysToAgent yes\n"
{% else %}
                keyring_entry="  AddKeysToAgent yes\n"
{% endif %}
            fi
            printf "\nHost $ssh_host\n$keyring_entry  User $ssh_username\n  IdentityFile $GLOBAL_SSH_KEYS_PATH/$ssh_filename\n" >> $SSH_CONFIG_FILE
            echo "Added entry for ssh-key pair in config."
        fi

        echo "Your public key:"
        cat $export_file_path.pub
    }
fi

{%   if ansible_facts.os_family != "Darwin" %}
# DERIVED FROM: https://github.com/kaiwan/usefulsnips/blob/d8dc243fbd22b4190ab7418864d346b7cf119a17/common.sh#L376
# Given a process name, determines the # of threads currently alive
# within it _and_ other processes of the same name.
# Params:
#   $1 = process name
#   Ret: # of threads curr alive in the given process
#    -the 'return' is an artifact; we echo the value; the caller is to
#     pick it up using the usual quoting technique.
proc-nthreads() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: proc-nthreads pid" >&2      # TODO: `$FUNCNAME` doesn't work ??!
        return 1
    fi

    local pid total_thrds
    #for pidrec in $(ps -LA|egrep "^$1")
    # Loop over all processes by given name
    for pid in $(pgrep "$1"); do
        #echo "pid: ${pid}"
        # get # threads within this pid
        local nthrd=$(ls /proc/${pid}/task |wc -w)
        #echo "${pid}:${nthrd}"
        let total_thrds+=nthrd
    done
    echo "${total_thrds}"
}
{%   endif %}
{% endif %}

diff-strings () {
    diff <(echo "$1" ) <(echo "$2")   # Compares 2 strings (uses process substitution)
}

poweroff-wait_for_pid() {
    local pid=${1:?"The pid to wait for may be specified."}

    sudo sh -c "while true ; do ps ${pid} > /dev/null || break ; sleep 5; done ; shutdown -h +1"
}


{% if 'workstations' in group_names    or ansible_facts.os_family == 'Darwin' %}
if command -v pdfimages > /dev/null; then
    pdf-extract_images() {
        local filename_prefix=${1:?"The 'pdf file' may be specified."}

        pdfimages -all "$1" "$1:t:r_pdf--extracted_img"
    }
fi

if command -v qpdf > /dev/null; then
    pdf-decrypt() {
        qpdf --decrypt --password=$2 $1 "$1:t:r--decrypted.pdf"
    }
fi

if command -v img2pdf > /dev/null; then
    pdf-from_images() {
        img2pdf -o "$1:t:r.pdf" $@
    }
fi

if command -v gs > /dev/null; then
    pdf-merge() {
        gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -sOutputFile="$1:t:r--merged.pdf" $@
    }
fi
{% endif %}


{% if 'clients_media' in group_names    or ansible_facts.os_family == 'Darwin' %}
{%   set DEFAULT_OUTPUT_FNAME = "output-$(date +'%F-%H_%m_%S')" %}
{%   set FILE_NOT_FOUND_MSG = "File(s) not found" %}
# - `ffmpeg` -
if command -v ffmpeg > /dev/null; then
    mp4-merge_video_audio_stream () {
        local video_stream=${1:?"The 'video_stream' may be specified."}
        local audio_stream=${2:?"The 'audio_stream' may be specified."}

        local output_file=${3:="{{ DEFAULT_OUTPUT_FNAME }}.mp4"}


        if [[ -f "$video_stream" && -f "$audio_stream" ]]; then
            ffmpeg -i "$video_stream" -i "$audio_stream" -c:v copy -c:a copy "$output_file"
        else
            echo "{{ FILE_NOT_FOUND_MSG }}"
        fi
    }

    video-speedup_by_multiplier () {
        local video_file=${1:?"The 'video_file' may be specified."}                               # USE CASE: Speed up screen recording 4 gif creation ;TODO: Discards audio currently  ??!?!?!?!?!?!?
        local multiplier=${2:?"The 'multiplier' may be specified."}

        local output_file=${3:="{{ DEFAULT_OUTPUT_FNAME }}.$video_file:t:e"}


        if [[ -f "$video_file" ]]; then
            ffmpeg -i "$video_file" -filter:v "setpts=PTS/${multiplier}" -an "$output_file"       # Taken from: https://superuser.com/a/1261681
        else
            echo "{{ FILE_NOT_FOUND_MSG }}"
        fi
    }

    video-trim_keep () {
        local cut_ranges=${1:?"Cuts may be specified as follows: start-end[,start2-end2,…], where each h[h][:mm:ss.MMM]."}
        cut_ranges=("${(@s/,/)cut_ranges}")
        local ffmpeg_cuts
        for cut_range in $cut_ranges; do
            local cut_range=("${(@s/-/)cut_range}")
{%   raw %}
            if (( 2 != ${#cut_range[@]} )); then
{%   endraw %}
                echo "Invalid cut_range"
                return 1
            fi
            local cut_start=$(gdate -d "1970-01-01 ${cut_range[@]:0:1}Z" +%s.%N)
            local cut_end=$(gdate -d "1970-01-01 ${cut_range[@]:1:1}Z" +%s.%N)
            ffmpeg_cuts+="between(t,${cut_start},${cut_end})"
            ffmpeg_cuts+='+'
        done
        ffmpeg_cuts="${ffmpeg_cuts::-1}"

        local file=${2:?"Filename may be specified."}

        ffmpeg -i "${file}" -vf "select='${ffmpeg_cuts}',setpts=N/FRAME_RATE/TB" -af "aselect='${ffmpeg_cuts}',asetpts=N/SR/TB" "trimmed_${file}"
    }


#    mp4-from_m2ts () {
#        local input=${1:?"The 'M2TS'-file may be specified."}
#        local output=${2:="{{ DEFAULT_OUTPUT_FNAME }}.mp4"}
#
#
#        if [[ -f "$input" ]]; then
#            ffmpeg -i "$input" -vcodec libx264 -crf 20 -acodec ac3 -vf "yadif" "$output"
#        else
#            echo "{{ FILE_NOT_FOUND_MSG }}"
#        fi
#    }

    mp3-convert_to () {
        for f in "$@"; do
            ffmpeg -i "$f" -acodec libmp3lame -ab 320k "${f%.*}.mp3"    # Replace any file extension w/ .mp3
        done
    }

    flac-convert_to_aiff () {
        for f in "$@"; do
            ffmpeg -i "$f" -write_id3v2 1 -c:v copy "${f%.*}.aiff"     # Replace any file extension w/ .mp3
        done
    }
fi


if command -v gifsicle > /dev/null; then
    gif-from_video () {
        local video_file=${1:?"The 'video_file' may be specified."}

        if [[ -f "$video_file" ]]; then
            ffmpeg -i "$video_file" -pix_fmt rgb8 -r 10 -f gif - | gifsicle -O3 -o "${video_file}.gif"
        else
            echo "{{ FILE_NOT_FOUND_MSG }}"
        fi
    }
fi
{% endif %}


# - PATH
{% if ansible_facts.os_family != 'Darwin' %}
# NOTE: 4 some inexplicable reason, those paths are "present" in on Ubuntu, but NOT on Debian
path-add "/usr/local/sbin"     "after"
path-add "/usr/sbin"           "after"
path-add "/sbin"               "after"
{% else %}
{%   if 'clients_devel' in group_names or 'servers_devel' in group_names %}

path-add "/opt/homebrew/opt/llvm/bin" "before"
#path-add "/opt/homebrew/opt/sphinx-doc/bin" "before"
{%   endif %}
{%   if 'client_workstation' in group_names %}

path-add "/Library/TeX/texbin/" "after"
{%   endif %}
{% endif %}
{% if 'clients_devel' in group_names or 'servers_devel' in group_names %}

[ -f ~/.cargo/env ] && source $HOME/.cargo/env
{% endif %}
{% if 'clients_devel' in group_names or 'servers_devel' in group_names   or  'clients_workstation' in group_names %}

path-add "$HOME/bin" "before"
{% endif %}
