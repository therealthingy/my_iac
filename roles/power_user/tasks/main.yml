---
- ansible.builtin.include_tasks: '{{ item }}'
  loop:
    - packages-python.yml



- name: Install file general purpose tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - detox                         # Renames files to make them easier to work w/ under Unix & related OSes
          - tree
          - rename
          - dos2unix
          - jdupes                        # OG: `fdupes`
          - rsync
          - rclone                        # Cloud storage management software
      become: '{{ package_manager_become }}'
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
          - libc-bin                      # Collection of helper programs, so called binary tools, that work in conjunction with libc  (`iconv`, ..)
          - file
          - zerofree                      # NOTE: Useful 4 sparse files
        state: present
      become: true
      when: ansible_facts.os_family != 'Darwin'
    - name: '[Darwin]'
      community.general.homebrew:
        name:
        - gnu-sed
        - gawk
        - grep
      become: false
      when: ansible_facts.os_family == 'Darwin'

- name: '[Debian/Ubuntu] Install file archiving tools'
  ansible.builtin.apt:
    name:
      - zip
      - unzip
    state: present
  become: true
  when: ansible_facts.os_family != 'Darwin'

- name: Install backup tools              # macOS has TimeMachine
  ansible.builtin.apt:
    name:
      - borgbackup
    state: present
  become: true
  when: ansible_facts.os_family != 'Darwin'

- name: Monitoring tools
  block:
    - name: Install monitoring tools (I)
      block:
        - name: '[Debian/Ubuntu]'
          ansible.builtin.apt:
            name:
              - atop
              - dstat                     # System monitoring tool  (allows monitoring system resources such as cpu, memory, disk & network stats) -> replacement 4 `vmstat`, `iostat` & `ifstat`
              - psmisc                    # Utilities that use the procfs (`fuser` - Identifies processes using files or sockets, `killall` - kills processes by name, `prtstat` - prints process statistics, `pslog` - prints log path(s) of a process, `pstree` - shows currently running processes as a tree, `peekfd` - shows data traveling over a fildes)
              - iotop
              - powertop
              - sysstat                   # `sar` (can be used 2 monitor Linux system’s resources like CPU usage, memory utilization, I/O devices consumption, etc.), `iostat`
              - usbutils                  # `lsusb`
            state: present
          when: ansible_facts.os_family != 'Darwin'
        - name: '[Darwin]'
          community.general.homebrew:
            name:
              - lsusb
              - pidof
              - smartmontools
          become: false
          when: ansible_facts.os_family == 'Darwin'
    - name: Install monitoring tools (II)
      ansible.builtin.apt:
        name:
          - smartmontools                 # `smartctl` & `smartd` 4 controlling & monitoring SMART storage
          - hdparm                        # Allows setting & viewing ATA hd drive HW params & test performance
          - nvme-cli
          - lm-sensors                    # `sensors`
      when:
        - ansible_facts.os_family != 'Darwin'
        - hw_is_rpi == False
        -  'hypervisor is not defined or not hypervisor'
  become: true

- name: Install networking tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - nmap                          # Contains also `ncat` on macOS ??!
          - socat
          - arp-scan                      # Contains `arp-scan`, `arp-fingerprint`
          - iperf
          - speedtest-cli
          - wget
          - aria2                         # Download tool  (SEE: https://aria2.github.io/); cmd: `aria2c`
          - wrk                           # HTTP benchmarking tool
#          - openvpn
      become: "{{ 'true' if ansible_facts.os_family != \"Darwin\" else 'false' }}"
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
          - iproute2                      # `ip`;   NOTE: Package 'net-tools' has been deprecated
          - traceroute
          - netcat-openbsd
          - dnsutils                      # `dig`
          - tcpdump
          - netdiscover
        state: present
      become: true
      when: ansible_facts.os_family != 'Darwin'
    - name: '[Darwin]'
      community.general.homebrew:
        name:
          - wireguard-tools
      become: false
      when: ansible_facts.os_family == 'Darwin'

- name: Administration tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - mosh
          - tmux
      become: '{{ package_manager_become }}'
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
#          - aptitude
          - util-linux                    # Most likely already installed (contains MANY utilities)  (`lscpu`, `lspci`, `hexdump`, `choom`, …)
          - software-properties-common    # abstraction of the used apt repositories (allows easily managing distribution & independent software vendor software sources)  -> `add-apt-repository`, `apt-add-repository`
#          - initramfs-tools
#          - stow                         # SEE https://www.gnu.org/software/stow/
        # FS stuff:
          - cloud-guest-utils             # `growpart`
          - btrfs-compsize                # `compsize <file>` -> Compare size of files (2 see effect of compression)
#          - fuse
#          - ntfs-3g                       # Read/write NTFS driver 4 FUSE
#          - libapfs-utils                 # Contains `fsapfsinfo`, an APFS information retrieval utility, & `fpafsmount`, a FUSE-based APFS filesystem implementation
#          - smb4k                         # UI network neighborhood browser & Samba share mounting utility
        state: present
      become: true
      when: ansible_facts.os_family != 'Darwin'
    - name: '[Darwin]'
      community.general.homebrew:
        name:
          - terminal-notifier
      become: false
      when: ansible_facts.os_family == 'Darwin'


- name: Install oh-my-tmux
  block:
    - name: Download & Install
      ansible.builtin.git:
        repo: https://github.com/gpakosz/.tmux.git
        dest: '{{ os_homedir }}/{{ user.name }}/.tmux/'
        clone: true
        depth: 1
        update: true
      register: repo_clone
      failed_when:
        - repo_clone.failed
        - not 'Local modifications exist in the destination' in repo_clone.msg
    - name: tmux.conf
      ansible.builtin.file:
        src: '{{ os_homedir }}/{{ user.name }}/.tmux/.tmux.conf'
        dest: '{{ os_homedir }}/{{ user.name }}/.tmux.conf'
        state: link
    - name: "TODO: Own config    (TODO: fix font)"
      ansible.builtin.file:
        src: '{{ os_homedir }}/{{ user.name }}/.tmux/.tmux.conf.local'
        dest: '{{ os_homedir }}/{{ user.name }}/.tmux.conf.local'
        state: link
  become: false


- name: Install privacy tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - coreutils                     # `shred`
          - openssl
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
          - gnupg                         # Encryption & signing tool
        state: present
      when: ansible_facts.os_family != 'Darwin'
    - name: '[Darwin]'
      community.general.homebrew:
        name:
          - gpg
      become: false
      when: ansible_facts.os_family == 'Darwin'
    - name: '[Darwin] Install homebrew package'
      ansible.builtin.include_tasks: ../../client/base/tasks/darwin/homebrew_casks.yml
      vars:
        packages_homebrew_casks:          # TODO: Add flatpak counterpart 4 linux & check whether VM
          - dir: Privacy
            packages:
              - cryptomator
          - packages:                      # Need 2 be in base-dir
            - little-snitch
#            - tunnelblick

    - name: '[Darwin] hblock'
      block:
        - name: Install
          community.general.homebrew:
            name: hblock
          become: false
        - name: Config hblock
          block:
            - name: Create dir
              ansible.builtin.file:
                path: /etc/hblock.d
                state: directory
                owner: root
                group: wheel
                mode: 0755
            - name: Copy config
              ansible.builtin.template:
                src: 'hblock/{{ config_file }}.j2'
                dest: '/etc/hblock.d/{{ config_file }}'
                owner: root
                group: wheel
                mode: 0644
              with_items:
                - header
                - blacklist.list
                - whitelist.list
              loop_control:
                loop_var: config_file
            - name: Setup cron job
              block:
                - name: Get path of hblock exec
                  ansible.builtin.shell: which hblock
                  register: result_hblock
                  changed_when: false
                - name: Add cron job
                  ansible.builtin.cron:
                    name: hblock autoupdate
                    minute: "0"
                    hour: "18"
                    dom: "*/3"
                    month: "*"
                    dow: "*"
                    user: root
                    job: '{{ result_hblock.stdout }} -H /etc/hblock.d/header -A /etc/hblock.d/whitelist.list -D /etc/hblock.d/blacklist.list -q'
          become: true
      when:
        - 'hypervisor is not defined or not hypervisor'
        - ansible_facts.os_family == 'Darwin'               # TODO: Add Ubuntu

    - name: '[Darwin]'
      block:
        - name: Install fuse-t
          block:
            - name: Add homebrew tap
              community.general.homebrew_tap:
                name: macos-fuse-t/homebrew-cask
            - name: Install
              community.general.homebrew_cask:
                name: fuse-t
                state: latest
        # …
      when:
        - ansible_facts.os_family == 'Darwin'
        - false                           # $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ DISABLED 4 NOW DUE 2 BUGINESS
  become: '{{ package_manager_become }}'


- name: Install shell related tools
  block:
    - name: '[Darwin / Ubuntu/Debian]'
      ansible.builtin.package:
        name:
          - tldr
          - moreutils                     # `sponge`, `parallel`, …
          - parallel                      # NOTE: Installs also `parallel` like `moreutils`  (but seems 2 be newer version)
          - pv
      become: '{{ package_manager_become }}'
    - name: '[Ubuntu/Debian]'
      ansible.builtin.apt:
        name:
          - procps                        # `watch`, `pmap` command
          - uuid
        state: present
      become: true
      when: ansible_facts.os_family != 'Darwin'
    - name: '[Darwin]'
      community.general.homebrew:
        name:
          - watch
          - gnu-time
          - duti                          # Set default app 4 opening file
      become: false
      when: ansible_facts.os_family == 'Darwin'

    - name: NvChad
      block:
        # NOTE: REQUIRE CLEANUP (if previously used): `rm -rf .config/nvim .local/share/nvim .cache/nvim`
        - name: Install it
          block:
            # TODO: Font in Gnome Terminal  (atm only iTerm2)
            - name: Install NerdFont
              block:
                - name: '[Debian/Ubuntu] Install deps'
                  ansible.builtin.apt:
                    name: fontconfig                        # Required 4 handler which rebuilds fonts cache
                    state: present
                  become: true
                  when: ansible_facts.os_family != 'Darwin'
                - name: Set fact(s)
                  ansible.builtin.set_fact:
                    nf_fonts_dir: "{{ os_homedir }}/{{ user.name }}/{{ (ansible_facts['os_family'] == 'Darwin')|ternary('Library/Fonts', '.local/share/fonts') }}/"
                - name: Check already installed
                  ansible.builtin.shell: "ls {{ nf_fonts_dir }}/JetBrainsMonoNerdFont*.ttf"
                  failed_when: false
                  changed_when: false
                  register: result_nerdfont_installed
                - name: Download & install
                  ansible.builtin.unarchive:
                    src: "https://github.com/ryanoasis/nerd-fonts/releases/download/v{{ nerdfont_version }}/JetBrainsMono.zip"      # TODO: Always latest version
                    dest: "{{ nf_fonts_dir }}"
                    remote_src: true
                  when: result_nerdfont_installed is failed
              notify: rebuild fonts cache
            - name: Download & Install
              ansible.builtin.git:
                repo: https://github.com/NvChad/starter.git
                dest: '{{ os_homedir }}/{{ user.name }}/.config/nvim/'
                clone: true
                depth: 1
                update: true
              register: repo_clone
              failed_when:
                - repo_clone.failed
                - not 'Local modifications exist in the destination' in repo_clone.msg
          when: ansible_facts.os_family == 'Darwin'                  # $$$   TODO: RMV ONCE DEBIAN APT REPOS HAVE version 0.9.3 (atm 0.6 which isn't supported by nvchad)
          become: false
          # TODO: $$$$$$$$$$$$$$$$$$$$$     config
          # TODO: Plugins --   DrawIt (ascii diagrams)

        - name: Config
          block:
            - name: vimrc
              ansible.builtin.lineinfile:
                dest: '{{ os_homedir }}/{{ user.name }}/.config/nvim/lua/{{ vimrc_setting.file }}'
                line: '{{ vimrc_setting.line }}'
                regexp: '{{ vimrc_setting.regexp }}'
              with_items:
                - regexp: 'vim\\.opt\\.relativenumber'
                  line: 'vim.opt.relativenumber = true'     # SHORTHAND: `:set rnu`
                  file: 'options.lua'
                - regexp: 'vim\\.opt\\.tabstop'
                  line: 'vim.opt.tabstop = 4'
                  file: 'options.lua'
                - regexp: 'vim\\.opt\\.shiftwidth'          # Autoindent (`e.g., if (val)` -> Enter => autoindents next line n spaces)
                  line: 'vim.opt.shiftwidth = 4'
                  file: 'options.lua'
                - regexp: 'theme = "\w+",$'
                  line: 'theme = "catppuccin",'
                  file: 'chadrc.lua'
              loop_control:
                loop_var: vimrc_setting
            - name: Copy config files
              ansible.builtin.template:
                src: '{{ common_nvim_conf_file.src }}.j2'
                dest: '{{ os_homedir }}/{{ user.name }}/{{ common_nvim_conf_file.dest }}'
                mode: 0644
              with_items:
        #        - src: nvim/vimrc
        #          dest: '.vimrc'
                - src: nvim/lspconfig.lua
                  dest: .config/nvim/lua/configs/lspconfig.lua
                - src: nvim/plugins.lua
                  dest: .config/nvim/lua/plugins/init.lua
              loop_control:
                loop_var: common_nvim_conf_file
      become: false
      when: ansible_facts.os_family == 'Darwin'     # TODO: install on Ubuntu once nvim version (in apt repos) is compatible w/ NVChad



- name: Install benchmark tools
  block:
    - name: '[Darwin] Install homebrew packages'
      ansible.builtin.include_tasks: ../../client/base/tasks/darwin/homebrew_casks.yml
      vars:
        packages_homebrew_casks:          # TODO: Add flatpak counterparts 4 linux & check whether VM
          - dir: Benchmark
            packages: ['amorphousdiskmark']


- name: Install maintenance tools
  block:
    - name: '[Darwin] Install homebrew packages'
      ansible.builtin.include_tasks: ../../client/base/tasks/darwin/homebrew_casks.yml
      vars:
        packages_homebrew_casks:          # TODO: Add flatpak counterparts 4 linux & check whether VM
          - dir: Maintenance
            packages:
              - appcleaner
              - omnidisksweeper
              - onyx
#              - aldente                   # TODO


- name: Install virtualization tools
  block:
    - name: '[Darwin] Install homebrew packages'
      ansible.builtin.include_tasks: ../../client/base/tasks/darwin/homebrew_casks.yml
      vars:
        packages_homebrew_casks:          # TODO: Add flatpak counterparts 4 linux & check whether VM
          - dir: Tools/Virtualization
            packages:
              - vmware-fusion             # TODO: Install w/ option `--no-quarantine`, otherwise: '“vmware-id” is an app downloaded from the Internet. Are you sure you want to open it?'
#              - utm


- name: Install misc tools
  block:
    - name: '[Darwin] Install homebrew packages'
      ansible.builtin.include_tasks: ../../client/base/tasks/darwin/homebrew_casks.yml
      vars:
        packages_homebrew_casks:          # TODO: Add flatpak counterparts 4 linux & check whether VM
          - dir: Misc
            packages:
              - apparency
              - istat-menus
              - prefs-editor
              - qlmarkdown
              - raycast
    - name: '[Darwin]'
      ansible.builtin.package:
        name:
          - spek                          # No cask, despite being an UI app  -> opened via `spek`
      when: ansible_facts.os_family == 'Darwin'
