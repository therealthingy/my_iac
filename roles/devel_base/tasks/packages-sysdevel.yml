---
- ansible.builtin.include_tasks: packages-git.yml
- ansible.builtin.include_tasks: packages-gcc.yml

- name: "[Darwin / Debian/Ubuntu] Install common systems programming tools/libs"
  block:
    - name: Install packages (I)
      block:
        - name: "[Darwin / Debian/Ubuntu]"
          ansible.builtin.package:
            name:
              # Misc.:
              - bison # Parser generator
              - flex # Generates lexical analyzers
              - shellcheck # Lint bash scripts
              - bear # Generate compilation dbs  (when using e.g., `make`)
              - cppcheck # Static analysis 4 detecting bugs (undefined behavior & dangerous coding constructs) in C src
              - flawfinder # Finds potential security flaws in C src
              - lcov
              # Build tools/Compilers:
              - ccache # SEE: https://ccache.dev/
              - autoconf # Tool 4 producing configure script 4 building, installing & packing SW
              - automake # Automates parts of the compilation process
              - pkg-config
              # Assemblers:
              - nasm
              # Debuggers & Tools  (NOTE: binutils, util-linux & gdb are most likely already installed)
              - binutils # Contains `readelf`, `gprof`, …
              - binwalk
              #              - poke                  # Extensible editor 4 structured binary data
              - cloc # Count loc
              - doxygen # Generates documentation from annotated C++ sources
              - sphinx-doc
            state: present
          become: "{{ package_manager_become }}"

        - name: "[Debian/Ubuntu]"
          ansible.builtin.apt:
            name:
              #  - LKM dev:
              - "linux-headers-{{ ansible_kernel }}"
              - "linux-tools-{{ ansible_kernel }}"
              #- linux-tools-generic   # Kernel modules required 4 `perf`
              #- linux-tools-common    # `perf`  (Performance analysis tools for Linux)
          ignore_errors: true # In case it's not a distro-kernel …
          when: ansible_facts.os_family != 'Darwin'

        - name: "[Debian/Ubuntu]"
          ansible.builtin.apt:
            name:
              - lua5.4 # TODO: REVISE VERSION
              # Git:
              - git-email # ( optional )
              # Compilers, static analysis tools, …:
              - manpages-dev
              - build-essential # Includes GDB, g++/GNU compiler collection, & some tools (`make`) & libraries required 2 compile a program
              # Build tools:
              #              - gcc-multilib          # Mechanism 4 building & running code 4 different ABIs 4 the same CPU family on a given system;
              #                                      # Most commonly used 2 support 32-bit code on 64-bit systems and 64-bit code on 32-bit systems w/ a 64-bit kernel
              - autotools-dev
              - ninja-build
              # Debuggers & Tools
              - dwarves # `pahole` (alignment of data structures => CPU CL), `codiff` (compare effects of src changes in bin files), `pfunct`, `pdwtags` (print DWARF info), …
              - gdb
              #- gstack              # TODO: Not available 4 Ubuntu -- Wrapper around `gdb` 4 peeking into process's stack
              - bpftrace
              - strace
              - ltrace
              - bpfcc-tools # BPF Compiler Collection (BCC) is a toolkit 4 creating efficient kernel tracing & manipulation programs
              - valgrind
              - massif-visualizer
              - libc6-dbg # Debugging symbols 4 libc6 (so we can get accurate tracebacks within libc)
              # 'Performance' analysis:
              - kcachegrind # KDE GUI 2 visualize profiling data (mainly used as visualization frontend for data measured by Cachegrind/Callgrind tools from the Valgrind package)
              - hotspot # UI (similar 2 KCachegrind 4 valgrind, BUT) around `perf`  (SEE: https://github.com/KDAB/hotspot)
              - heaptrack # Heap analysis tool (from KDE)
              - heaptrack-gui
              - time # NOTE: Usually implemented as shell builtin  (hence must be called directly via `/usr/bin/time`)
              # Utils:
              - numactl # More powerful alternative to `taskset`  (useful on NUMA systems, incl. AMD CPUs w/ "chiplet" design;  `numastat`)
              # Libs:
              - libbsd-dev # Provides `strlcat`(3), …
              - binutils-dev # Necessary 2 build programs which use the GNU BFD library  (which is part of binutils); also includes libbfd
              - libcap-dev # POSIX capabilities API
              - libaio-dev # (Linux kernel AIO access -> Enables userspace 1 use Linux kernel asynchronous I/O system calls, important 4 the performance of dbs & other advanced apps)
              - libevent-dev # Event notification library  (SEE: https://libevent.org/)
              - libseccomp-dev # Provides high level iface 4 constructing, analyzing & installing seccomp filters via a BPF (passed 2 kernel's `prctl`)
              - libelf-dev # Allows reading & writing of ELF files on a high level
              - libdw-dev # Provides access to DWARF debug information stored inside ELF files
              - libdwarf-dev # Allows reading/consuming and writing/producing of DWARF debugging information from object files, shared libraries, and executables    --  basically the same as `libdw-dev` ??!
              - libiberty-dev # De-mangles C++ function names
              - libnuma-dev # Allows controlling specific NUMA scheduling or memory placement policies
              # C devel
              - libncurses5-dev # ncurses  (terminal-independent method of updating character screens w/ reasonable optimization)
              - ncurses-dev
              - libcurl4-gnutls-dev
              #              - libperl-dev           # Assists in developing applications which embed a Perl interpreter
              - libreadline-dev # Provides a set of functions for use by applications that allow users to edit command lines as they are typed in
              - openssl
              - libssl-dev
              - zlib1g-dev # (zlib)
              - liblzma-dev # (lzma)
              - zstd
              # - CXX devel:
              - libgtest-dev # Google Test
              #              - libboost-all-dev      # Boost
              # Misc.:
              - fakeroot # Provides a fake root environment (2 remove the need 2 become root 4 a package build)
              - checksec # Used 2 check properties of executables (like PIE, RELRO, PaX, Stack Canaries, PIE, RPATH, RUNPATH & compiler fortification) & kernel security options (like  GRSecurity & SELinux)
              - yad # Tool 4 creating graphical dialogs from shell scripts
              # Kernel dev -- "missing stuff":
              #  - Deps:
              - bc # Bench calculator (uses own algebraic language)
              - debhelper # 4 creating `deb`ian packages (`bindeb-pkg` target)
              - cscope # Interactive, text screen based source browsing tool
              - indent # Format C code 2 follow kernel "styleguide"
              # - "Convenience" tools:
              - exuberant-ctags # Parses code, producing an index mapping the names of significant entities
              # - Static analysis:
              - sparse # Semantic checker 4 finding potential problems w/ C kernel code (e.g., mixing pointers 2 user address space & pointers 2 kernel address space)
              - coccinelle
              # - Debugging:
              - crash # Kernel debugging utility (allowing gdb like syntax)
              - trace-cmd # Retrieve & analyze function traces from the kernel  (essentially a wrapper over ftrace)
              #              - lttng-tools           # Linux Trace Toolkit next generation (LTTng)
              #              - lttng-modules-dkms        $$$$$  TODO: COMPILATION ERROR ON AARCH64
              #              - liblttng-ust-dev
              # - Performance analysis:
              - stress # Imposes load on & stress test a computer system
              - stress-ng
              - rt-tests # Programs that test & measure various components of RT kernel behavior (timer, signal & HW latency) + functioning of priority-inheritance mutexes
              - tuna # Low-level system performance tuning 4 realtime systems (change the attributes of application & kernel threads, IRQs, CPUs, & CPU sockets => can change scheduling policy, scheduler priority & processor affinity 4 processes & process threads, processor affinity 4 interrupts, isolate CPUs, & spread threads or IRQs across CPUs)
              - perf-tools-unstable # ???????
              # - Misc.
              - man-db # ???????
              - kmod # 4 controlling Linux Kernel modules
              - gnuplot
              - sysfsutils # Sysfs query tool & boot-time setup   ????
              - bsdmainutils # dep: `bsdutils` (`logger`, `renice`, `script`, `scriptlive`, `scriptreplay` & `wall`),  …
              - bsdextrautils # `col`, `colcrt`, `colrm`, `column`, `hd`, `hexdump`, `look`, `ul` & `write`
              - smem # Reports memory usage
              - hwloc # HW Locality -- Provides a hierarchical view of the machine, NUMA memory nodes, sockets, shared caches, cores & simultaneous multithreading
              - virt-what # Script which detects whether it's running in a VM
              - kexec-tools # Boot in2 different kernel (w/o HW re-init)
              - libjson-c-dev
              - net-tools # Deprecated  (SUCCESSOR: `iproute2`)
            state: present
          when: ansible_facts.os_family != 'Darwin'

        - name: "[Ubuntu]"
          ansible.builtin.apt:
            name:
              - glibc-tools # Contains ’libSigSegv’ library (SEE: https://lemire.me/blog/2023/05/01/under-linux-libsegfault-and-addr2line-are-underrated/)
              # 'Performance' analysis
          when: ansible_facts.os_family == 'Ubuntu'

        - name: "[Darwin]"
          community.general.homebrew:
            name:
              - lua
              # Build tools:
              - ninja
              # Libs:
              - readline
              - ncurses # Text-based UIs (TUIs)
              #- boost
              - googletest # Google Test
          become: false
          when: ansible_facts.os_family == 'Darwin'
  become: true

- name: Install gef (4 `gdb`)
  block:
    - name: gef - Check whether already installed # TODO: Always update if not latest version
      ansible.builtin.find:
        paths: "/{{ os_homedir }}/{{ user.name }}/"
        file_type: file
        use_regex: true
        hidden: true
        patterns: '^\.gef-20\d{2}\.(0[1-9]|1[012])\.py$'
      register: gef_find_output
    - name: gef - Run install script
      ansible.builtin.shell:
        cmd: 'bash -c "$(curl -fsSL https://gef.blah.cat/sh)"'
      become: false
      when: (gef_find_output.files | length == 0)
  when: ansible_facts.os_family != 'Darwin'

- ansible.builtin.include_tasks: packages-llvm.yml

- ansible.builtin.include_tasks: packages-bazel.yml

- name: Install latest CMake
  block:
    - name: "[Darwin]"
      ansible.builtin.package:
        name:
          - cmake
      become: "{{ package_manager_become }}"
      when: ansible_facts.os_family == 'Darwin'

    - name: "[Debian/Ubuntu]"
      block:
        - name: kitware - Add apt signing key & repo
          ansible.builtin.deb822_repository:
            name: kitware
            uris: https://apt.kitware.com/ubuntu/
            suites: "{{ cmake_ubuntu_apt_distro }}"
            components: main
            signed_by: https://apt.kitware.com/keys/kitware-archive-latest.asc
          register: kitware_repo_added
        - name: kitware - Update apt cache
          ansible.builtin.apt:
            update_cache: true
          when: kitware_repo_added.changed == True
        - name: kitware - Install it
          ansible.builtin.package:
            name:
              - cmake
              - cmake-curses-gui
      become: true
      when: ansible_facts.os_family != 'Darwin'

- name: Rust toolchain
  block:
    - name: check if cargo is installed
      ansible.builtin.shell: command -v cargo
      failed_when: false
      changed_when: false
      ignore_errors: true
      register: cargo_command_result
    - name: Install rustup + -toolchain
      block:
        - ansible.builtin.get_url:
            url: https://sh.rustup.rs
            dest: /tmp/sh.rustup.rs
            mode: "0755"
            force: true
        - ansible.builtin.shell: /tmp/sh.rustup.rs -y --profile default -c rust-analyzer miri
      when: cargo_command_result.rc == 1
  become: false

- name: Go toolchain
  block:
    - name: Create dir
      ansible.builtin.file:
        path: "/{{ os_homedir }}/{{ user.name }}/.golang/bin/"
        state: directory
        #owner: '{{ user.name }}'
        #group: '{{user.group_name}}'
        mode: 0755
      become: false
    - name: "[Darwin]"
      ansible.builtin.package:
        name: go
      become: "{{ package_manager_become }}"
      when: ansible_facts.os_family == 'Darwin'
    - name: "[Debian/Ubuntu]"
      ansible.builtin.package:
        name: golang-go
      become: true
      when: ansible_facts.os_family != 'Darwin'
#
# TODO: …
#- ansible.builtin.include_tasks: packages-trace_compass.yml

#- ansible.builtin.include_tasks: packages-intel_tools.yml
