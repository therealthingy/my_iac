#!/usr/bin/env zsh

# {{ ansible_managed }}

# =================================================================================================================
# =========================================   Function/Alias defintions   =========================================
# =================================================================================================================



# =========================== Global shell functions ===========================
####
#
# Substitute for 'history -c' (which is available in bash)
#
history-clear() {
  local HISTSIZE=0
  : > $HISTFILE

  unset HISTSIZE
}


####
# Checks and adds path to PATH variable if path exists (warns otherwise that path doesn't exist)
#
# @param 1: Path to be added to PATH var
# @param 2: Defines whether new path should be preprended or appended (by using 'after')
#
path-add() {
  newelement=${1%/}

  if [ ! -d "$1" ]; then
    echo -e "\e[1;31;49mPath '$1' can't be added to path b/c it doesn't exist!\e[0m\n"
  fi

  if ! echo $PATH | grep -E -q "(^|:)$newelement($|:)"; then
    if [ "$2" = "after" ]; then
        PATH="$PATH:$newelement"
    else
        PATH="$newelement:$PATH"
    fi
  fi
}

####
# Removes path from PATH variable
#
# @param 1: Path to be removed from PATH var
#
path-rm() {
    PATH="$(echo $PATH | sed -e "s;\(^\|:\)${1%/}\(:\|\$\);\1\2;g" -e 's;^:\|:$;;g' -e 's;::;:;g')"
}


####
# Checks and exports alias(es) if command exists (warns otherwise that command doesn't exist)
#
# @param 1 (required_command): The command which is used by alias (will be checked for presence)
# @param 2…n (alias): Will be validated and exported, if valid…
#
alias-add() {
  readonly required_command=${1:?"The 'required_command' may be specified."}
  : ${2:?"At least 1 alias may be specified."}

  shift

  if ! command -v ${required_command} > /dev/null; then
    echo -e "\e[1;31;49mThe required '${required_command}' command doesn't exist, not exporting alias(es)…\e[0m\n"
    return
  fi


  for alias in "$@"; do
    if [[ "$alias" =~ ^.+=.+$ ]]; then
      alias "$alias"
    else
      echo -e "\e[1;31;49mThe alias '$alias' seems to be invalid, not exporting...\e[0m\n"
    fi
  done
}



# =========================== Aliases  (which SHOULD be in '.zshenv') ===========================
# - 'Default' commands -
# Only 1st word of command is checked for aliases by shell, any following aren't checked
#  -> E.g. in 'sudo ll', only the first word ('sudo') is checked for alias, 'll' isn't checked
#  => Can be fixed by telling shell to check next word after the alias (i.e 'sudo') by adding a space to the end of the alias value
alias sudo='sudo '

alias ls='ls -G'

{% if ansible_facts.os_family == 'Darwin' %}
alias stat='stat -x'
{% endif %}

# - 'Shortcuts' -
#alias zsh-update="source ~/.zshrc"

alias d='dirs -v | head -10'    # To use: cd ~<number> -or- enter <number> directly

{% if ansible_facts.os_family == 'Darwin' %}
alias l='ls -lah --color=auto'
alias ll='ls -lh --color=auto'

alias-add gsed decolorize='gsed -r "s/\\x1B\\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"'
{% else %}
alias l='ls -lah'
alias ll='ls -lh'

alias decolorize='sed -r "s/\\x1B\\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"'
{% endif %}

alias dusage='du -h -d1'

alias inet-pg="echo 'Pinging Google' && ping 8.8.8.8"
alias inet-pip="echo 'Public IP:' && curl -4 icanhazip.com && curl -6 icanhazip.com; echo"


# --- Installed tools  ---
{% if 'il_workstations' in group_names    or ansible_facts.os_family == 'Darwin' %}
alias-add yt-dlp   vid-download="yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'"   vid-download_audio="yt-dlp -f 'bestaudio[ext=m4a]'"
alias-add vid-download vid-download-channel="vid-download  -o '%(channel)s - %(title)s-%(id)s.%(ext)s'"
alias-add vid-download vid-download-workaround_fname="vid-download  -o '%(title).200s  [%(id)s].%(ext)s'"         # Workaround for: https://github.com/yt-dlp/yt-dlp/issues/1136#issuecomment-932077195
{% endif %}

{% if ansible_facts.os_family == 'Darwin' %}
alias-add hblock hblock-up="hblock -H /etc/hblock.d/header -A /etc/hblock.d/whitelist.list -D /etc/hblock.d/blacklist.list"
alias-add hblock hblock-down="hblock -S none -D none"
{% endif %}

# - Replace existing commands -
alias-add pigz gzip='pigz' gunzip='unpigz'
alias-add pbzip2 bzip2='pbzip2' # bunzip2='pbunzip2' bzcat='pbzcat'
{% if ansible_facts.os_family == 'Darwin' %}
alias-add colordiff diff='colordiff'

# Use max # of threads
alias xz='xz -T 0'
{% endif %}

{% if 'dev_workstations' in group_names or 'dev_servers' in group_names    or ansible_facts.os_family == 'Darwin'%}
alias pmake='time nice make -j$(nproc) --load-average=$(nproc)'               # Taken from: https://stackoverflow.com/a/4778475
{% endif %}



# ---------------------- ------ Environment variables  (which SHOULD be in '.zshenv') ------ ----------------------
{% if ansible_facts.os_family == 'Darwin' %}
export LSCOLORS=ExFxCxDxBxegedabagacad  # Default (only brighter)
#export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx  # Black background
#export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd  # Linux terminal
{% else %}
{%   if 'dev_workstations' in group_names or 'dev_servers' in group_names %}
#export MAKEFLAGS="-j$(nproc)"
{%   endif %}
#…
{% endif %}


# =========================== Aliases ===========================
{%   if ansible_facts.os_family != 'Darwin' %}
alias journal-clear='sudo journalctl --vacuum-time=2d' # --vacuum-size=500M

{%   if 'rpis' in group_names %}
# --- RPi specific ---
alias temp='vcgencmd measure_temp'
{%   endif %}

{%   if 'dev_workstations' in group_names or 'dev_servers' in group_names %}
alias-add objdump obj="objdump -M intel -C --visualize-jumps -d "               # Note: Used 2 be fct. w/ (now removed) suffix: `$@ | nvim -`
{%   endif %}

{%   if ansible_facts.os_family == 'Debian' %}
# - apt aliases -
alias agi='sudo apt-get install' #<packages>
alias agu='sudo apt-get update'
alias ags='sudo apt-cache search' #<string-in-package-name-or-descr>
alias agsh='sudo apt-cache show' #<string>
alias agr='sudo apt-get remove' #<packages>
alias agd='sudo apt-get dist-upgrade'
alias agc='sudo apt-get clean'
alias agac='sudo apt-get autoclean'

alias agud='agu && agd'
{%   endif %}
{% endif %}




# =========================== Actual functions ===========================
# - Misc.
poweroff-wait_for_pid() {
  local pid=${1:?"The pid to wait for may be specified."}

  sudo sh -c "while true ; do ps ${pid} > /dev/null || break ; sleep 5; done ; shutdown -h +1"
}

diff-strings () {
  diff <(echo "$1" ) <(echo "$2")   # Compares 2 strings (uses process substitution)
}


if command -v ssh-keygen > /dev/null; then

  ssh-key_generate () {
    readonly GLOBAL_SSH_KEYS_PATH="$HOME/.ssh"
    readonly SSH_CONFIG_FILE="$GLOBAL_SSH_KEYS_PATH/config"

    local ssh_comment=''
    local ssh_filename=''
    local ssh_username=''
    local ssh_host=''


    local add_identity_file='y'
    local export_file_path=/dev/null

    read "add_identity_file?Store keys in $SSH_CONFIG_FILE and add entry in config [Y/n]? "
    vared -p 'Enter filename for ssh-key pair: ' -c ssh_filename


    if [ "$add_identity_file" = "n" ]; then
        export_file_path=$(pwd)/$ssh_filename
    else
        export_file_path=$GLOBAL_SSH_KEYS_PATH/$ssh_filename

        # Create files / folder anyway + set permissions
        mkdir $GLOBAL_SSH_KEYS_PATH 2> /dev/null
        chmod 700 $GLOBAL_SSH_KEYS_PATH
        touch $SSH_CONFIG_FILE $GLOBAL_SSH_KEYS_PATH/authorized_keys $GLOBAL_SSH_KEYS_PATH/known_hosts
        chmod 644 $SSH_CONFIG_FILE $GLOBAL_SSH_KEYS_PATH/authorized_keys $GLOBAL_SSH_KEYS_PATH/known_hosts
    fi


    vared -p 'Enter comment for ssh-key pair: ' -c ssh_comment
    ssh-keygen -t ed25519 -C $ssh_comment -f $export_file_path

    if [ "$add_identity_file" != "n" ]; then
        chmod 600 $export_file_path
        chmod 644 $export_file_path.pub

        vared -p 'Enter username for config file: ' -c ssh_username
        vared -p 'Enter host for config file: ' -c ssh_host

        printf "\n\nHost $ssh_host\n  User $ssh_username\n  IdentityFile $GLOBAL_SSH_KEYS_PATH/$ssh_filename" >> $SSH_CONFIG_FILE
        echo "Added entry for ssh-key pair in config."
    fi

    echo "Your public key:"
    cat $export_file_path.pub
  }

fi

{% if ansible_facts.os_family == 'Darwin' %}
{% set DEFAULT_OUTPUT_FNAME = "output-$(date +'%F-%H_%m_%S')" %}
{% set FILE_NOT_FOUND_MSG = "File(s) not found" %}

# - ffmpeg stuff -
if command -v ffmpeg > /dev/null; then

  mp4-merge_video_audio_stream () {
    local video_stream=${1:?"The 'video_stream' may be specified."}
    local audio_stream=${2:?"The 'audio_stream' may be specified."}

    local output_file=${3:="{{ DEFAULT_OUTPUT_FNAME }}.mp4"}


    if [[ -f "$video_stream" && -f "$audio_stream" ]]; then
      ffmpeg -i "$video_stream" -i "$audio_stream" -c:v copy -c:a copy "$output_file"
    else
      echo "{{ FILE_NOT_FOUND_MSG }}"
    fi
  }

  video-speedup_by_multiplier () {
    local video_file=${1:?"The 'video_file' may be specified."}                             # USE CASE: Speed up screen recording 4 gif creation ;TODO: Discards audio currently  ??!?!?!?!?!?!?
    local multiplier=${2:?"The 'multiplier' may be specified."}

    local output_file=${3:="{{ DEFAULT_OUTPUT_FNAME }}.$video_file:t:e"}


    if [[ -f "$video_file" ]]; then
      ffmpeg -i "$video_file" -filter:v "setpts=PTS/${multiplier}" -an "$output_file"       # Taken from: https://superuser.com/a/1261681
    else
      echo "{{ FILE_NOT_FOUND_MSG }}"
    fi
  }


#  mp4-from_m2ts () {
#
#    local input=${1:?"The 'M2TS'-file may be specified."}
#    local output=${2:="{{ DEFAULT_OUTPUT_FNAME }}.mp4"}
#
#
#    if [[ -f "$input" ]]; then
#      ffmpeg -i "$input" -vcodec libx264 -crf 20 -acodec ac3 -vf "yadif" "$output"
#    else
#      echo "{{ FILE_NOT_FOUND_MSG }}"
#    fi
#  }

  mp3-convert_to () {
    for f in "$@"; do
      ffmpeg -i "$f" -acodec libmp3lame -ab 320k "${f%.*}.mp3"    # Replace any file extension w/ .mp3
    done
  }

  flac-convert_to_aiff () {
    for f in "$@"; do
      ffmpeg -i "$f" -write_id3v2 1 -c:v copy "${f%.*}.aiff"     # Replace any file extension w/ .mp3
    done
  }

fi


if command -v gifsicle > /dev/null; then

    gif-from_video () {
      local video_file=${1:?"The 'video_file' may be specified."}

      if [[ -f "$video_file" ]]; then
        ffmpeg -i "$video_file" -pix_fmt rgb8 -r 10 -f gif - | gifsicle -O3 -o "${video_file}.gif"
      else
        echo "{{ FILE_NOT_FOUND_MSG }}"
      fi
    }

fi


# =========================== Aliases  (which SHOULD be in '.zshenv') ===========================
alias-add brew brew-up="brew update && brew upgrade ; brew cleanup ; brew doctor"


alias dns-flush="sudo dscacheutil -flushcache ; sudo killall -HUP mDNSResponder"
alias network-disable_packet_filter="sudo pfctl -d"    # Disable Eddie network lock


alias backup_poweroff="sudo sh -c 'tmutil startbackup --block && shutdown -h +1'"


alias clipbrd-text_2_lower='echo $(pbpaste) | tr "[A-Z]" "[a-z]" | pbcopy'
alias clipbrd-text_2_upper='echo $(pbpaste) | tr "[a-z]" "[A-Z]" | pbcopy'

#alias app-open_all="find /Applications ~/Applications -type d -name '*.app' -prune -exec open -a {} \;"

#alias finder-show_hiddenfiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
#alias finder-hide_hiddenfiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'


{% if ansible_architecture != "arm64" %}
# - Hackintosh specific -
if command -v mountefi > /dev/null; then
  # alias esp-mount_open='sudo mkdir /Volumes/EFI ; sudo mount -t msdos /dev/disk1s1 /Volumes/EFI && open /Volumes/EFI'
  alias-add mountefi esp-mount_open='mountefi / && open /Volumes/EFI'
fi
{% endif %}


# - GNU/Linux commands -
alias poweroff='/sbin/shutdown -h now'
alias reboot='/sbin/shutdown -r now'



# =========================== Actual functions ===========================
dns-reset_server_for_service() {
  local network_service=${1:?"Network service may be provided."}

  sudo networksetup -setdnsservers $network_service "Empty"
}


if command -v duti > /dev/null; then

  app-set_as_default_for_extension() {
    local app_path=${1:?"Path to app may be provided."}
    local file_extension=${2:?"File extension may be specified."}

    local app_cfbid
    if ! app_cfbid=`mdls -name kMDItemCFBundleIdentifier -r $app_path`; then
      echo "The provided app-path \"$app_path\" may be invalid."
      return 1
    fi

    if `duti -s $app_cfbid $file_extension all`; then
      echo "OK - Set \"$app_cfbid\" for file extension \"$file_extension\""
    else
      echo "FAIL - Couldn't set \"$app_path\" for file extension \"$file_extension\""
      return 1
    fi

  }

fi
{% endif %}
