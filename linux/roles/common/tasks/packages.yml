---
- name: Update packages
  block:
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        upgrade: dist
        clean: true
        autoremove: true
        allow_downgrade: true
      when: ansible_facts['os_family'] != "Darwin"
      become: true
    - name: '[Darwin]'
      community.general.homebrew:
        update_homebrew: true
      become: false
      when: ansible_facts['os_family'] == "Darwin"


- name: Install file general purpose tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - neovim
          - detox                         # Renames files to make them easier to work w/ under Unix & related OSes
          - tree
          - rename
          - fdupes
          - dos2unix
          - rsync
          - rclone                        # Cloud storage management software
      become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
          - libc-bin                      # Collection of helper programs, so called binary tools, that work in conjunction with libc  (`iconv`, ..)
          - file
          - lsof
        state: present
      become: true
      when: ansible_facts['os_family'] != "Darwin"
    - name: '[Darwin]'
      community.general.homebrew:
        name:
        - gnu-sed
        - gawk
        - grep
      become: false
      when: ansible_facts['os_family'] == "Darwin"

- name: Install file archiving tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - pigz
      become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
          - pbzip2
          - zip
          - unzip
        state: present
      become: true
      when: ansible_facts['os_family'] != "Darwin"
    - name: '[Darwin]'
      community.general.homebrew:
        name:
          - xz
          - gnu-tar
          - gnu-time
      become: false
      when: ansible_facts['os_family'] == "Darwin"

- name: Install backup tools
  ansible.builtin.apt:
    name:
      - borgbackup
      - timeshift
    state: present
  become: true
  when: ansible_facts['os_family'] != "Darwin"

- name: Monitoring tools
  block:
    - name: Install monitoring tools (I)
      block:
        - name: '[Darwin / Debian/Ubuntu]'
          ansible.builtin.package:
            name:
              - htop
              - neofetch
          become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
        - name: '[Debian/Ubuntu]'
          ansible.builtin.apt:
            name:
              - atop
              - dstat                         # System monitoring tool  (allows monitoring system resources such as cpu, memory, disk & network stats) -> replacement 4 `vmstat`, `iostat` & `ifstat`
              - psmisc                        # Utilities that use the proc file-system (`fuser` - Identifies processes using files or sockets, `killall` - kills processes by name, `prtstat` - prints process statistics, `pslog` - prints log path(s) of a process, `pstree` - shows currently running processes as a tree, `peekfd` - shows data travelling over a fildes)
              - iotop
              - powertop
              - sysstat                       # `sar` (can be used 2 monitor Linux systemâ€™s resources like CPU usage, memory utilization, I/O devices consumption, etc.), `iostat`
              - usbutils                      # `lsusb`
            state: present
          when: ansible_facts['os_family'] != "Darwin"
        - name: '[Darwin]'
          community.general.homebrew:
            name:
              - lsusb
              - pidof
              - smartmontools
          become: false
          when: ansible_facts['os_family'] == "Darwin"
    - name: Install monitoring tools (II)
      ansible.builtin.apt:
        name:
          - smartmontools                 # `smartctl` & `smartd` 4 controlling & monitoring SMART storage
          - hdparm                        # Allows setting & viewing ATA hd drive HW params & test performance
          - nvme-cli
          - lm-sensors                    # `sensors`
      when:
        - ansible_facts['os_family'] != "Darwin"
        - "'rpis' not in group_names"
        - "'vmware_vms' not in group_names"
  become: true

- name: Install networking tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - iperf
          - speedtest-cli
          - nmap
          - netcat
          - socat
          - wget
      become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
          - curl
          - dnsutils                      # `dig`
          - iproute2                      # `ip`;   NOTE: package 'net-tools' has been deprecated
          - traceroute
          - tcpdump
        state: present
      become: true
      when: ansible_facts['os_family'] != "Darwin"

- name: Administration tools
  block:
    - name: '[Darwin / Debian/Ubuntu]'
      ansible.builtin.package:
        name:
          - mosh
          - tmux
      become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
    - name: '[Debian/Ubuntu]'
      ansible.builtin.apt:
        name:
          - sudo
          - aptitude
          - util-linux                    # Most likely already installed (contains MANY utilities)  (`lscpu``, `lspci``, ...)
          - software-properties-common    # abstraction of the used apt repositories (allows easily managing distribution & independent software vendor software sources)  -> `add-apt-repository`, `apt-add-repository`
          - needrestart                   # NOTE: 2 check whether reboot is pending: `sudo needrestart -r i`
          - ssh
          #- initramfs-tools
          #- stow                          # See https://www.gnu.org/software/stow/
          # FS stuff
          - btrfs-progs
          #- fuse
          #- ntfs-3g                        # Read/write NTFS driver 4 FUSE
          #- libapfs-utils                  # Contains `fsapfsinfo`, an APFS information retrieval utility, & `fpafsmount`, a FUSE-based APFS filesystem implementation
        state: present
      become: true
      when: ansible_facts['os_family'] != "Darwin"
    - name: '[Darwin]'
      community.general.homebrew:
        name:
          - terminal-notifier
      become: false
      when: ansible_facts['os_family'] == "Darwin"


- name: Privacy tools
  block:
    - name: Install privacy tools
      block:
        - name: '[Darwin / Debian/Ubuntu]'
          ansible.builtin.package:
            name:
              - ccrypt
          become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
        - name: '[Debian/Ubuntu]'
          ansible.builtin.apt:
            name:
              - cryptsetup
              - zerofree
            state: present
          become: true
          when: ansible_facts['os_family'] != "Darwin"

    - name: Install luks sparse file helper
      ansible.builtin.template:
        src: bin/luks-sparse_helper.j2
        dest: /usr/local/bin/luks-sparse_helper
        owner: root
        group: root
        mode: 0755
      become: true
      when: ansible_facts['os_family'] != "Darwin"


- name: Install shell related tools
  block:
    - name: '[Darwin / Ubuntu/Debian]'
      ansible.builtin.package:
        name:
          - moreutils
          - parallel                      # NOTE: Installs also `parallel` like `moreutils`  (but seems 2 be newer version)
          - pv
      become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
    - name: '[Ubuntu/Debian]'
      ansible.builtin.apt:
        name:
          - procps                        # `watch`, `pmap` command
          - uuid
        state: present
      become: true
      when: ansible_facts['os_family'] != "Darwin"
    - name: '[Darwin]'
      community.general.homebrew:
        name:
          - watch
      become: false
      when: ansible_facts['os_family'] == "Darwin"


# (!!  ALSO REQUIRED FOR ZSH  !!)
- name: git
  block:
    - name: Install git
      ansible.builtin.package:
        name:
          - git
          - git-lfs
        state: present
      become: "{{ 'true' if ansible_facts['os_family'] != \"Darwin\" else 'false' }}"
#    - name: Init git LFS for current user        # TODO: NOT  IDEMPOTENT ???
#      ansible.builtin.command: git lfs install
#      become: false


- ansible.builtin.include_tasks: '{{ item }}'
  loop:
    - package-zsh.yml
    - package-python.yml
#    - package-nala.yml



- name: Config
  block:
    - name: nvim
      block:
        - name: Copy config
          block:
            - name: Config (I)
              ansible.builtin.template:
                src: nvim.j2
                dest: '{{os_homedir}}/{{ user_name }}/.vimrc'
                mode: 0644
            - name: Config (II)
              block:
                - name: Create config dir
                  ansible.builtin.file:
                    path: '{{os_homedir}}/{{ user_name }}/.config/nvim'
                    state: directory
                - name: Copy config
                  ansible.builtin.copy:
                    dest: '{{os_homedir}}/{{ user_name }}/.config/nvim/init.vim'
                    content: |
                      source ~/.vimrc
                    mode: 0644
          become: false
        - name: '[Linux] Set "alternatives"'
          community.general.alternatives:
            name: '{{ common_nvim_alt.name }}'
            link: '{{ common_nvim_alt.link }}'
            path: '{{ common_nvim_alt.path }}'
          with_items:
            - { name: editor, link: /usr/bin/editor, path: /usr/bin/nvim }
            - { name: vi,     link: /usr/bin/vi,     path: /usr/bin/nvim }
          loop_control:
            loop_var: common_nvim_alt
          when: ansible_facts['os_family'] != "Darwin"
          become: true

    - name: tmux
      ansible.builtin.template:
        src: tmux.conf.j2
        dest: '{{os_homedir}}/{{ user_name }}/.tmux.conf'
        owner: '{{ user_name }}'
        group: '{{ user_group_name }}'
        mode: 0644
      become: false

    - name: htop
      ansible.builtin.template:
        src: htoprc.j2
        dest: '{{os_homedir}}/{{ user_name }}/.htoprc'
        owner: '{{ user_name }}'
        group: '{{ user_group_name }}'
        mode: 0644
      become: false
