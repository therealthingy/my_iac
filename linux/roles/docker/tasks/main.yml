---
- name: Install it
  block:
    - name: Set config as vars for role
      # SEE: https://github.com/geerlingguy/ansible-role-docker#role-variables
      ansible.builtin.set_fact:
        docker_edition: 'ce'
        docker_service_manage: true
        docker_service_state: started
        docker_service_enabled: true
        docker_restart_handler_state: restarted
        docker_install_compose_plugin: true
        docker_compose_package: docker-compose-plugin
        docker_compose_package_state: present
        docker_install_compose: false
        docker_add_repo: true
        docker_users:
          - '{{ user_name }}'
        docker_daemon_options:
          ipv6: true
          'fixed-cidr-v6': '2001:db8:abc1::/64'
    - name: Run role
      ansible.builtin.include_role:
        name: geerlingguy.docker
  become: true



- name: Install Docker Compose using Pip.       # $$$$$$$$$$$$$$$$$$$$   Still required (docker-compose plugin relies on it)  => TODO: CHANGE ONCE RESOLVED: https://github.com/ansible-collections/community.docker/issues/216
  ansible.builtin.pip:
    name: docker-compose
    state: present
    executable: pip3
  become: false



# --------------------------------------------------  IPv6 support  --------------------------------------------------
# TODO: WORKAROUND -- Fix routing:  Currently IPv6 w/ NAT (https://blog.widodh.nl/2017/04/docker-containers-with-ipv6-behind-nat/) since network prefix (provided by ISP) changes constantly :/
- name: Add + configure IPv6 network
  block:
    # Equivalent command: `docker network create --subnet="2001:db8:1::/64" --ipv6 traefik`
    - name: Create a network w/ IPv6 IPAM config
      community.docker.docker_network:
        name: '{{ docker_default_network }}'
        enable_ipv6: true
        ipam_config:
          - subnet: 2001:db8:1::/64
      become: false

    - name:  "Configure IPv6 NAT  (TODO: REVISE)"
      block:
        - name: Install iptables
          ansible.builtin.apt:
            name:
              - iptables
              - iptables-persistent
            state: present
          become: true

        # Equivalent command  (+ persist):
        #   Apply rules:`ip6tables -t nat -A POSTROUTING  -s 2001:db8:1::/64 ! -o docker0     -j MASQUERADE`   (reference: https://linux.die.net/man/8/ip6tables)
        #                           table  Append <chain>  Source               Out-Interface  Jump  (target, i.e., what to do if the packet matches it ??)
        #   Persist rules: `sudo sh -c "ip6tables-save > /etc/iptables/rules.v6"`
        # Validation:
        #   Whether rule was applied: `sudo ip6tables -t nat -n -L`
        #   Whether 'correct' response ip address is used  (otherwise request- & response ip won't match): `ip route get <dst-in-network>`
        #   Docker container connectivity: `docker run --network=reverse_proxy --rm -t busybox ping6 -c 4 google.com`
        - name: Copy iptable config tables
          ansible.builtin.template:
            src: rules.v6.j2           # TODO: INLINE ONCE SUPPORTED BY MODULE
            dest: /etc/iptables/rules.v6
            owner: root
            group: root
            mode: 0644
          notify: restart networking daemon
          become: true


# ------------------------------------------------------------------------------------------------------
- name: "[dhcpcd5] FIX: Docker related issue  (https://github.com/raspberrypi/linux/issues/4092; TODO: CHECK WHETHER ISSUE STILL PERSISTS)"
  ansible.builtin.lineinfile:
    dest: /etc/dhcpcd.conf
    line: 'denyinterfaces veth'               # Temporary workaround for issue: https://github.com/raspberrypi/linux/issues/4092"
    insertbefore: BOF                         # Necessary, otherwise inserted after e.g., config for interface
  notify: restart dhcpcd service
  when: "'rpis' in group_names  and  ansible_facts.distribution == 'Debian'"
  become: true
