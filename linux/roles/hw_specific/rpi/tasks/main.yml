---
- name: '[Raspberry Pi OS] Delete default pi user passwordless file  (TODO: Check whether newer versions still use username "pi" in filename)'
  ansible.builtin.file:
    state: absent
    path: /etc/sudoers.d/010_pi-nopasswd
  when: ansible_facts.distribution == 'Debian'
  become: true


- name: SW
  block:
    - name: Install
      ansible.builtin.apt:
        name:
          - libraspberrypi-bin       # '`vcgencmd`'
          - rpi-eeprom               # TODO: not tested yet  (see https://askubuntu.com/questions/1253070/raspberry-pi-4-firmware-upgrade-eeprom-over-ubuntu-20-04)
        state: present
    - name: Add necessary groups
      ansible.builtin.user:
        name: '{{ user_name }}'
        groups: video
        append: true
  become: true


# FIRMWARE SETTINGS: https://www.raspberrypi.com/documentation/computers/config_txt.html
- name: Determine path of config file
  block:
    - name: '[Raspberry Pi OS]'
      ansible.builtin.set_fact:
        firmware_config_file: /boot/config.txt
      when: ansible_facts.distribution != 'Ubuntu'
    - name: '[Ubuntu]'
      ansible.builtin.set_fact:
        firmware_config_file: /boot/firmware/config.txt
      when: ansible_facts.distribution == 'Ubuntu'

- name: Disable HW
  block:
    # VALIDATE:
    #   - BT: `hcitool dev` OR `hciconfig -a`           ( OR `bluetoothctl scan on`  (https://www.makeuseof.com/manage-bluetooth-linux-with-bluetoothctl/) )
    #   - WIFI: `ip a show wlan0`
    - name: … radios (WiFi & Bluetooth)
      block:
        # Alternative: Uninstall package `bluez`
        - name: Disable BT services
          ansible.builtin.service:
            name: '{{ item }}'
            state: stopped
            enabled: false
          failed_when: false
          with_items:
            - hciuart.service
#            - bluealsa.service
            - bluetooth.service
        - name: Disable HW                        # AGAIN: REQUIRES reboot
          ansible.builtin.lineinfile:
            dest: '{{ firmware_config_file }}'
            regexp: '^(#)?dtoverlay={{ item }}'
            line: 'dtoverlay={{ item }}'
          with_items:
            - disable-bt
            - disable-wifi

    - name: … LEDs
      ansible.builtin.lineinfile:
        dest: '{{ firmware_config_file }}'
        regexp: '^(#)?dtparam={{ item.key }}={{ item.value }}'
        line: 'dtparam={{ item.key }}={{ item.value }}'
      with_items:
        # Disable activity LED
        - { key: 'act_led_trigger', value: 'none' }
        - { key: 'act_led_activelow', value: 'off' }
        # Disable PWR LED  (currently not working properly  ??, see: https://stackoverflow.com/a/71492090)
        - { key: 'pwr_led_trigger', value: 'default-on' }
        - { key: 'pwr_led_activelow', value: 'off' }
        # Disable ethernet port (ACT & LNK) LEDs
        - { key: 'eth_led0', value: '4' }
        - { key: 'eth_led1', value: '4' }
  become: true

- name: Optimize 4 more speed
  ansible.builtin.lineinfile:
    dest: '{{ firmware_config_file }}'
    regexp: '^(#)?{{ item.key }}='
    line: '{{ item.key }}={{ item.value }}'
  with_items:
    - { key: 'over_voltage', value: '4' }     # Optimize HW: Over Voltage
    - { key: 'arm_freq', value: '1800' }      # Optimize HW: CPU freq
#    - { key: 'core_freq', value: '550' }      # Optimize HW: GPU freq
#    - { key: 'gpu_mem', value: '16' }         # Optimize HW: GPU Memory Split
    - { key: 'boot_delay', value: '0' }       # Optimize boot: Disable boot delay
    - { key: 'disable_poe_fan', value: '1' }  # Optimize boot: Turn off PoE hat
    - { key: 'initial_turbo', value: '60' }   # Optimize boot: OC CPU 4 first secs
    - { key: 'disable_splash', value: '1' }   # UNRELATED …
  become: true

- ansible.builtin.include_tasks: rpi-fan-controller.yml

#  - name: Reboot system        # $$$$$$$$$$$$$$$$$$$   TODO (would require `when` - `changed_when`)
#    ansible.builtin.reboot:
