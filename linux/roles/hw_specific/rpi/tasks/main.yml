---
- name: '[Raspberry Pi OS] Delete default pi user passwordless file  (TODO: Check whether newer versions still use username "pi" in filename)'
  ansible.builtin.file:
    state: absent
    path: /etc/sudoers.d/010_pi-nopasswd
  when: ansible_facts.distribution == 'Debian'
  become: true


- ansible.builtin.include_tasks: '{{ item }}'
  loop:
    - rpi-fan-controller.yml


# SEE: https://www.raspberrypi.com/documentation/computers/config_txt.html
- name: "Change firmware settings  (NOTE: WILL TAKE EFFECT AFTER SYSTEM REBOOT !!)"
  block:
    - name: Determine path of config file
      block:
        - name: '[Ubuntu]'
          ansible.builtin.set_fact:
            firmware_config_file: /boot/firmware/config.txt
          when: ansible_facts.distribution == 'Ubuntu'
        - name: '[Raspberry Pi OS]'
          ansible.builtin.set_fact:
            firmware_config_file: /boot/config.txt
          when: ansible_facts.distribution != 'Ubuntu'
    - name: Disable LEDs
      ansible.builtin.blockinfile:
        insertafter: '^[pi4]$'
        block: |
          # Disable Activity LED
          dtparam=act_led_trigger=none
          dtparam=act_led_activelow=off

          # Disable PWR LED  (currently not working properly  ??, see: https://stackoverflow.com/a/71492090)
          dtparam=pwr_led_trigger=default-on
          dtparam=pwr_led_activelow=off

          # Disable ethernet port (ACT & LNK) LEDs
          dtparam=eth_led0=4
          dtparam=eth_led1=4
        path: '{{ firmware_config_file }}'
    - name: Optimize 4 more speed
      lineinfile:
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        path: '{{ firmware_config_file }}'
      with_items:
        - { regexp: '^(#)?over_voltage=', line: 'over_voltage=4' }      # Optimize HW: Over Voltage
        - { regexp: '^(#)?arm_freq=', line: 'arm_freq=1800' }           # Optimize HW: CPU freq
#        - { regexp: '^(#)?core_freq=', line: 'core_freq=550' }          # Optimize HW: GPU freq
#        - { regexp: '^gpu_mem=', line: 'gpu_mem=16' }                   # Optimize HW: GPU Memory Split
        - { regexp: '^(#)?boot_delay=', line: 'boot_delay=0' }          # Optimize boot: Disable boot delay
        - { regexp: '^(#)?initial_turbo=', line: 'initial_turbo=60' }   # Optimize boot: OC CPU 4 first secs
#    - name: Reboot system
#      ansible.builtin.reboot:
  become: true


- name: Install SW
  block:
    - name: '`vcgencmd`'
      block:
        - name: Install
          ansible.builtin.apt:
            name: libraspberrypi-bin
            state: present
        - name: Add necessary groups
          ansible.builtin.user:
            name: '{{ user_name }}'
            groups: video
            append: true
    - name: Misc.
      ansible.builtin.apt:
        name:
          - rpi-eeprom               # TODO: not tested yet  (see https://askubuntu.com/questions/1253070/raspberry-pi-4-firmware-upgrade-eeprom-over-ubuntu-20-04)
        state: present
  become: true
