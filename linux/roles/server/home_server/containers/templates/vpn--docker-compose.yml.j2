---
# {{ ansible_managed }}

version: "3.7"

networks:
  vpn:
    enable_ipv6: true
    ipam:
      config:
        - subnet: '{{ ipv6_conf.prefix }}:2::/{{ (ipv6_conf.prefix_cidr + 16)|int }}'

services:
  ddclient:
#    image: lscr.io/linuxserver/ddclient:latest
    image: ddclient
    build:
      context: .
      dockerfile: dyndns-Dockerfile
    restart: unless-stopped
    container_name: ddclient
    user: {{ www_user.uid }}:{{ www_user.gid }}
    security_opt:
      - no-new-privileges:true
#    network_mode: bridge
    network_mode: host                    # Required 4 script …
    environment:
      - TZ={{ timezone }}
#    volumes:
#      - '{{ docker_container.config_basedir }}/{{ container.name }}/ddclient/:/config/'
#    labels:
#      - com.centurylinklabs.watchtower.enable=true

  wireguard:
    image: linuxserver/wireguard:latest
    restart: unless-stopped
    container_name: wireguard
    hostname: wireguard
#    user: {{ www_user.uid }}:{{ www_user.gid }}
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
#      - SYS_MODULE
    ports:
      # Port of the wireguard server
      - {{ vpn.port }}:{{ vpn.port }}/udp        # DEFAULT PORT: 51820
{% if vpn.wireguard_ui.user is not defined %}
      # Wireguard UI   -->  Access GUI via: `ssh -L 8080:127.0.0.1:8080 gg-rpi0`  (ALTERNATIVE: use traefik ––––––––  WHICH DOESN't WORK aS LONG AS We DON'T USE ITS NETWORK)
      - 127.0.0.1:{{ vpn.wireguard_ui.local_port if vpn.wireguard_ui.local_port is defined else 8080 }}:5000/tcp
{% endif %}
    networks:
      - vpn
    environment:
      - TZ={{ timezone }}
      - PUID={{ www_user.uid }}
      - PGID={{ www_user.gid }}
    sysctls:
        # REFERENCE: https://www.kernel.org/doc/html/latest/networking/ip-sysctl.html
        #            https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt
        - net.ipv6.conf.all.disable_ipv6=0
        # Enable packet forwarding
        - net.ipv4.ip_forward=1
        - net.ipv6.conf.all.forwarding=1
        # ?
        - net.ipv4.conf.all.src_valid_mark=1
        # Accept Router Advertisements (RAs)
        - net.ipv6.conf.eth0.accept_ra=2
        # Disable Privacy Extensions
        - net.ipv6.conf.eth0.use_tempaddr=0
        - net.ipv6.conf.default.use_tempaddr=0
        - net.ipv6.conf.all.use_tempaddr=0
        # How link-local- & autoconf addresses are generated (`0` = EUI64)
        - net.ipv6.conf.default.addr_gen_mode=0
        - net.ipv6.conf.eth0.addr_gen_mode=0
    volumes:
      - '{{ docker_container.data_basedir }}/{{ container.name }}/wireguard/:/config/'
    labels:
      - com.centurylinklabs.watchtower.enable=true
#      - com.centurylinklabs.watchtower.monitor-only=true
#      - traefik.enable=true
#      - traefik.http.services.wireguard_ui.loadbalancer.server.port=5000
#      - traefik.http.routers.wireguard_ui.rule=Host(`{{ container.name }}.{{ domainname }}`)

  wireguard-ui:
    image: ngoduykhanh/wireguard-ui:latest
    restart: unless-stopped
    container_name: wireguard-ui
#    user: {{ www_user.uid }}:{{ www_user.gid }}
    security_opt:
      - no-new-privileges:true
    cap_add:
      - NET_ADMIN
    # Use network of 'wireguard' service  (allows showing active clients in the status page)
    network_mode: service:wireguard
    # REFERENCE: https://github.com/ngoduykhanh/wireguard-ui#environment-variables
    environment:
      # UI
      - 'WGUI_USERNAME={{ vpn.wireguard_ui.user if vpn.wireguard_ui.user is defined else "gg" }}'
      - 'WGUI_PASSWORD={{ vpn.wireguard_ui.pass if vpn.wireguard_ui.user is defined else "1" }}'
{% if vpn.wireguard_ui.session_secret is defined %}
      - 'SESSION_SECRET={{ vpn.wireguard_ui.session_secret }}'
{% endif %}
      - 'WGUI_LOG_LEVEL={{ vpn.wireguard_ui.log_level }}'
      # Start / restart wireguard container w/ this container
      # $$  TODO: WORKAROUND  (https://github.com/ngoduykhanh/wireguard-ui/issues/381#issuecomment-1582258804)  $$
      - WGUI_MANAGE_START=false
      - WGUI_MANAGE_RESTART=false
      # Wireguard conf file (wg0.conf)
#      - WG_CONF_TEMPLATE
      # Server Tunnel
      - WGUI_SERVER_LISTEN_PORT={{ vpn.port }}
      - WGUI_ENDPOINT_ADDRESS={{ vpn.dyndns.domain }}:{{ vpn.port }}
      - WGUI_SERVER_INTERFACE_ADDRESSES={{ vpn.networks|map(attribute='server')|join(',') }}
      - WGUI_DNS={{ vpn.networks|map(attribute='dns')|join(',') }}
      # OVERHEAD: IPv4: 20 bytes / IPv6: 40 bytes, UDP: 8 bytes, WG: 32 bytes   //   MTU: Cable = 1500, DSL = 1492
{% if vpn.wireguard_mtu is defined %}
      - WGUI_MTU={{ vpn.wireguard_mtu }}
{% endif %}
      # ( Don't route inet traffic (by default) through tunnel   --> {# `{% for network in vpn.networks %}{{ network.subnet }},{{ "%s0/%s"|format(network.server[:-4], network.server.split("/")[1]) }}{{ "" if loop.last else "," }}{% endfor %}` ) #}
      - WGUI_DEFAULT_CLIENT_ALLOWED_IPS=0.0.0.0/0,::/0
      # Rules 4 forwarding from VPN subnet 2 actual network
      - WGUI_SERVER_POST_UP_SCRIPT=iptables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
      - WGUI_SERVER_POST_DOWN_SCRIPT=iptables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
{% if notifications_mail is defined %}
      # MAILING
      - SMTP_HOSTNAME={{ notifications_mail.smtp_host }}
      - SMTP_PORT={{ notifications_mail.smtp_port }}
      - SMTP_USERNAME={{ notifications_mail.smtp_username }}
      - SMTP_PASSWORD={{ notifications_mail.smtp_password }}
      - SMTP_AUTH_TYPE={{ notifications_mail.smtp_auth_type|upper  }}
      - SMTP_ENCRYPTION={{ notifications_mail.smtp_enc|upper }}
      - EMAIL_FROM_ADDRESS={{ notifications_mail.smtp_username }}
#      - EMAIL_FROM_NAME="WireGuard UI"
{% endif %}
    volumes:
      - {{ docker_container.data_basedir }}/{{ container.name }}/wireguard/:/etc/wireguard/
      - {{ docker_container.data_basedir }}/{{ container.name }}/wireguard-ui/:/app/db/
#    logging:
#      driver: json-file
#      options:
#        max-size: 50m
    labels:
      - com.centurylinklabs.watchtower.enable=true
