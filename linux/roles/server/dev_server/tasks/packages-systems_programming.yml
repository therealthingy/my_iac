---
- name: Install systems programming tools/libs
  ansible.builtin.apt:
    name:
      - shellcheck            # Lint bash scripts
      # Compiler / build tools
      - manpages-dev
      - build-essential       # Includes GNU debugger, g++/GNU compiler collection, and some more tools (`make`) and libraries that are required to compile a program
      - gcc-multilib          # Useful for cross-compiling   (Debian arm64 -- Error: 'Package '' has no installation candidate')
      - clang
      - pkg-config
      - cmake
      - cmake-curses-gui
      - autoconf
      # Debuggers / Tools  (NOTE: binutils, util-linux & gdb are most likely already installed)
      - binutils              # Contains `readelf`, `gprof`, ...
      - strace
      - bpftrace
      - ltrace
      - valgrind
      - kcachegrind           # KDE GUI 2 visualize profiling data (mainly used as visualization frontend for data measured by Cachegrind/Callgrind tools from the Valgrind package)
      - graphviz              # TODO: Apparently required by kcachegrind  ??
      # 'Performance' analysis
      - linux-tools-common    # `perf`  (Performance analysis tools for Linux)
      - linux-tools-generic   # Kernel modules required 4 `perf`
      - hotspot               # UI (similar 2 KCachegrind 4 valgrind, BUT) around perf
      - time                  # NOTE: Usually implemented as shell builting  (hence must be called directly via `/usr/bin/time ...`)
      - pahole                # Shows & manipulates data structure layout
      # Utils
      - numactl               # More powerful alternative to `taskset`  (useful on NUMA systems, incl. AMD CPUs w/ "chiplet" design;  `numastat`)
      # Libs
      - libomp-dev            # OpenMP
      - libelf-dev            # Allows reading & writing of ELF files on a high level
      - libdw-dev             # Provides access to DWARF debug information stored inside ELF files
      - libdwarf-dev          # Allows reading/consuming and writing/producing of DWARF debugging information from object files, shared libraries, and executables    --  basically the same as `libdw-dev` ??!
      - libc6-dbg             # Debugging symbols 4 libc6 (so we can get accurate tracebacks within libc)
      # Misc.
      - flex                  # Generates lexical analyzers
      - bison                 # Parser generator
    state: present
  become: true



- name: Install Intel Pin Tools
  block:
    - name: Set version
      ansible.builtin.set_fact:
        # TODO: GET ALWAYS LATEST VERSION;  SEE: https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-binary-instrumentation-tool-downloads.html
        intel_pin_tool_version: pin-3.25-98650-g8f6168173-gcc-linux
        intel_pin_tools_dir: /opt/intel
    - name: Check already installed
      ansible.builtin.command: 'which {{ intel_pin_tools_dir }}/{{ intel_pin_tool_version }}/pin'
      failed_when: false
      changed_when: false
      check_mode: false
      register: result_pin_command
      become: false
    - name: Install if not installed
      block:
        - name: Ensure dir exists
          file:
            path: "{{ intel_pin_tools_dir }}/"
            state: directory
            mode: 0755
        - name: Download & Install Pin tools
          ansible.builtin.unarchive:
            src: 'https://software.intel.com/sites/landingpage/pintool/downloads/{{ intel_pin_tool_version }}.tar.gz'
            remote_src: yes
            dest: "{{ intel_pin_tools_dir }}/"
            mode: 0755
        - name: Update PATH variable globally
          ansible.builtin.lineinfile:
            dest: /etc/zsh/zshenv
            line: |
              if [[ "$PATH" != *"{{ intel_pin_tools_dir }}/{{ intel_pin_tool_version }}"* ]]; then
                  export PATH="$PATH:{{ intel_pin_tools_dir }}/{{ intel_pin_tool_version }}"
              fi
            state: present
      when: result_pin_command.rc == 1
      become: true
  when: ansible_architecture == "x86_64"
  become: false


# Installation steps: https://www.intel.com/content/www/us/en/develop/documentation/vtune-install-guide/top/linux/package-managers.html
#- name: Install VTune
#  block:
#    - name: Add apt Repo
#      # NOTE: Equivalent command: `sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"`
#      ansible.builtin.apt_repository:
#        repo: deb https://apt.repos.intel.com/oneapi all main
#        state: present
#        filename: intel
#        update_cache: yes
#    - name: Install VTune
#      ansible.builtin.apt:
#        name: intel-oneapi-vtune
#  when: ansible_architecture == "x86_64"
#  become: true
